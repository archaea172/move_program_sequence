
move_program_sequence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d48  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006f28  08006f28  00007f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a8  080070a8  00009104  2**0
                  CONTENTS
  4 .ARM          00000008  080070a8  080070a8  000080a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b0  080070b0  00009104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b0  080070b0  000080b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070b4  080070b4  000080b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  080070b8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000104  080071bc  00009104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080071bc  00009428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001614a  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  0001f27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00021bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f04  00000000  00000000  00022f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c71  00000000  00000000  00023e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d0c  00000000  00000000  0004ba95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102c8d  00000000  00000000  000617a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016442e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  00164474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0016a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000104 	.word	0x20000104
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006f10 	.word	0x08006f10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000108 	.word	0x20000108
 800021c:	08006f10 	.word	0x08006f10

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a97      	ldr	r2, [pc, #604]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	f040 81f4 	bne.w	80011ea <HAL_TIM_PeriodElapsedCallback+0x3fa>
		if (count == hekichi1) {
 8000e02:	4b96      	ldr	r3, [pc, #600]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b95      	ldr	r3, [pc, #596]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d112      	bne.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x48>
			robomas[R_F-1].trgVel *= -1;
 8000e12:	4b94      	ldr	r3, [pc, #592]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e14:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	4b90      	ldr	r3, [pc, #576]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e22:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
			robomas[L_B-1].trgVel *= -1;
 8000e26:	4b8f      	ldr	r3, [pc, #572]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e28:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	425b      	negs	r3, r3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b8b      	ldr	r3, [pc, #556]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e36:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
		if (count == hekichi2) {
 8000e38:	4b88      	ldr	r3, [pc, #544]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d112      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x7e>
			robomas[R_B-1].trgVel *= -1;
 8000e48:	4b86      	ldr	r3, [pc, #536]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	425b      	negs	r3, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b83      	ldr	r3, [pc, #524]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e58:	809a      	strh	r2, [r3, #4]
			robomas[L_F-1].trgVel *= -1;
 8000e5a:	4b82      	ldr	r3, [pc, #520]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e5c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	425b      	negs	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b7e      	ldr	r3, [pc, #504]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		robomas[2].trgVel =  (int)(purpose * 36);
		robomas[3].trgVel = (int)(-purpose * 36);
*/


		for (int i=0; i<=3; i++){
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e198      	b.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x3b6>
			robomas[i].hensa = robomas[i].trgVel - robomas[i].actVel;
 8000e74:	4a7b      	ldr	r2, [pc, #492]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	015b      	lsls	r3, r3, #5
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4a77      	ldr	r2, [pc, #476]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	015b      	lsls	r3, r3, #5
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9c:	4a71      	ldr	r2, [pc, #452]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4413      	add	r3, r2
 8000ea4:	331c      	adds	r3, #28
 8000ea6:	edc3 7a00 	vstr	s15, [r3]
			if (robomas[i].hensa >= 1000) robomas[i].hensa = 1000;
 8000eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	4413      	add	r3, r2
 8000eb2:	331c      	adds	r3, #28
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800106c <HAL_TIM_PeriodElapsedCallback+0x27c>
 8000ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	db07      	blt.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8000ec6:	4a67      	ldr	r2, [pc, #412]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	015b      	lsls	r3, r3, #5
 8000ecc:	4413      	add	r3, r2
 8000ece:	331c      	adds	r3, #28
 8000ed0:	4a67      	ldr	r2, [pc, #412]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e014      	b.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x110>
			else if (robomas[i].hensa <= -1000) robomas[i].hensa = -1000;
 8000ed6:	4a63      	ldr	r2, [pc, #396]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	4413      	add	r3, r2
 8000ede:	331c      	adds	r3, #28
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001074 <HAL_TIM_PeriodElapsedCallback+0x284>
 8000ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	d806      	bhi.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	015b      	lsls	r3, r3, #5
 8000ef8:	4413      	add	r3, r2
 8000efa:	331c      	adds	r3, #28
 8000efc:	4a5e      	ldr	r2, [pc, #376]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000efe:	601a      	str	r2, [r3, #0]
			float d = (robomas[i].actVel - robomas[i].p_actVel) / 0.001;
 8000f00:	4a58      	ldr	r2, [pc, #352]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3306      	adds	r3, #6
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4a54      	ldr	r2, [pc, #336]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4413      	add	r3, r2
 8000f18:	3308      	adds	r3, #8
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fb1f 	bl	8000564 <__aeabi_i2d>
 8000f26:	a348      	add	r3, pc, #288	@ (adr r3, 8001048 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fcae 	bl	800088c <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd90 	bl	8000a5c <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	613b      	str	r3, [r7, #16]
			ind[i] += robomas[i].hensa*0.1;
 8000f40:	4a4e      	ldr	r2, [pc, #312]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fb1c 	bl	8000588 <__aeabi_f2d>
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
 8000f54:	4a43      	ldr	r2, [pc, #268]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	331c      	adds	r3, #28
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fb11 	bl	8000588 <__aeabi_f2d>
 8000f66:	a33a      	add	r3, pc, #232	@ (adr r3, 8001050 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff fb64 	bl	8000638 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4620      	mov	r0, r4
 8000f76:	4629      	mov	r1, r5
 8000f78:	f7ff f9a8 	bl	80002cc <__adddf3>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd6a 	bl	8000a5c <__aeabi_d2f>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	493c      	ldr	r1, [pc, #240]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	601a      	str	r2, [r3, #0]
			if (d >= 30000) d = 30000;
 8000f94:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f98:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001080 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	db02      	blt.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8000fa6:	4b37      	ldr	r3, [pc, #220]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e00a      	b.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			else if (d <= -30000) d = -30000;
 8000fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb0:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001088 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	d801      	bhi.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000fc0:	613b      	str	r3, [r7, #16]
			if (ind[i] >= 10000) ind[i] = 10000;
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001090 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	db06      	blt.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x1fa>
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e012      	b.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x220>
			else if (ind[i] <= -10000) ind[i] = -10000;
 8000fea:	4a24      	ldr	r2, [pc, #144]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80010a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d805      	bhi.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001004:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	4a22      	ldr	r2, [pc, #136]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800100e:	601a      	str	r2, [r3, #0]


			float t = k_p*robomas[i].hensa;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	4413      	add	r3, r2
 8001018:	331c      	adds	r3, #28
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	edc7 7a03 	vstr	s15, [r7, #12]
			if (t>=10000) t = 10000;
 800102c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001030:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001090 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8001034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	db32      	blt.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e03a      	b.n	80010ba <HAL_TIM_PeriodElapsedCallback+0x2ca>
 8001044:	f3af 8000 	nop.w
 8001048:	d2f1a9fc 	.word	0xd2f1a9fc
 800104c:	3f50624d 	.word	0x3f50624d
 8001050:	9999999a 	.word	0x9999999a
 8001054:	3fb99999 	.word	0x3fb99999
 8001058:	20000184 	.word	0x20000184
 800105c:	200002d0 	.word	0x200002d0
 8001060:	20000004 	.word	0x20000004
 8001064:	20000010 	.word	0x20000010
 8001068:	20000008 	.word	0x20000008
 800106c:	447a0000 	.word	0x447a0000
 8001070:	447a0000 	.word	0x447a0000
 8001074:	c47a0000 	.word	0xc47a0000
 8001078:	c47a0000 	.word	0xc47a0000
 800107c:	200002c0 	.word	0x200002c0
 8001080:	46ea6000 	.word	0x46ea6000
 8001084:	46ea6000 	.word	0x46ea6000
 8001088:	c6ea6000 	.word	0xc6ea6000
 800108c:	c6ea6000 	.word	0xc6ea6000
 8001090:	461c4000 	.word	0x461c4000
 8001094:	461c4000 	.word	0x461c4000
 8001098:	c61c4000 	.word	0xc61c4000
 800109c:	20000090 	.word	0x20000090
 80010a0:	c61c4000 	.word	0xc61c4000
			else if (t<=-10000) t = -10000;
 80010a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a8:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80010a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d801      	bhi.n	80010ba <HAL_TIM_PeriodElapsedCallback+0x2ca>
 80010b6:	4b4f      	ldr	r3, [pc, #316]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80010b8:	60fb      	str	r3, [r7, #12]
			robomas[i].cu = (int16_t)(t+k_i*ind[i]+k_d*d);
 80010ba:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80010da:	edd3 6a00 	vldr	s13, [r3]
 80010de:	edd7 7a04 	vldr	s15, [r7, #16]
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ee:	ee17 3a90 	vmov	r3, s15
 80010f2:	b219      	sxth	r1, r3
 80010f4:	4a43      	ldr	r2, [pc, #268]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	4413      	add	r3, r2
 80010fc:	330a      	adds	r3, #10
 80010fe:	460a      	mov	r2, r1
 8001100:	801a      	strh	r2, [r3, #0]
			if (robomas[i].cu <= -10000) robomas[i].cu = -10000;
 8001102:	4a40      	ldr	r2, [pc, #256]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4413      	add	r3, r2
 800110a:	330a      	adds	r3, #10
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001112:	4293      	cmp	r3, r2
 8001114:	da08      	bge.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x338>
 8001116:	4a3b      	ldr	r2, [pc, #236]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	015b      	lsls	r3, r3, #5
 800111c:	4413      	add	r3, r2
 800111e:	330a      	adds	r3, #10
 8001120:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8001124:	801a      	strh	r2, [r3, #0]
 8001126:	e012      	b.n	800114e <HAL_TIM_PeriodElapsedCallback+0x35e>
			else if (robomas[i].cu >= 10000) robomas[i].cu = 10000;
 8001128:	4a36      	ldr	r2, [pc, #216]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	015b      	lsls	r3, r3, #5
 800112e:	4413      	add	r3, r2
 8001130:	330a      	adds	r3, #10
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b21b      	sxth	r3, r3
 8001136:	f242 720f 	movw	r2, #9999	@ 0x270f
 800113a:	4293      	cmp	r3, r2
 800113c:	dd07      	ble.n	800114e <HAL_TIM_PeriodElapsedCallback+0x35e>
 800113e:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	4413      	add	r3, r2
 8001146:	330a      	adds	r3, #10
 8001148:	f242 7210 	movw	r2, #10000	@ 0x2710
 800114c:	801a      	strh	r2, [r3, #0]


			TxData[i*2] = (robomas[i].cu) >> 8;
 800114e:	4a2d      	ldr	r2, [pc, #180]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	015b      	lsls	r3, r3, #5
 8001154:	4413      	add	r3, r2
 8001156:	330a      	adds	r3, #10
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b21b      	sxth	r3, r3
 800115c:	121b      	asrs	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	b2d1      	uxtb	r1, r2
 8001166:	4a29      	ldr	r2, [pc, #164]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001168:	54d1      	strb	r1, [r2, r3]
			TxData[i*2+1] = (uint8_t)((robomas[i].cu) & 0xff);
 800116a:	4a26      	ldr	r2, [pc, #152]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	015b      	lsls	r3, r3, #5
 8001170:	4413      	add	r3, r2
 8001172:	330a      	adds	r3, #10
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	b21a      	sxth	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	3301      	adds	r3, #1
 800117e:	b2d1      	uxtb	r1, r2
 8001180:	4a22      	ldr	r2, [pc, #136]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001182:	54d1      	strb	r1, [r2, r3]
			robomas[i].p_actVel = robomas[i].actVel;
 8001184:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	4413      	add	r3, r2
 800118c:	3306      	adds	r3, #6
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b219      	sxth	r1, r3
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	4413      	add	r3, r2
 800119a:	3308      	adds	r3, #8
 800119c:	460a      	mov	r2, r1
 800119e:	801a      	strh	r2, [r3, #0]
		for (int i=0; i<=3; i++){
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	f77f ae63 	ble.w	8000e74 <HAL_TIM_PeriodElapsedCallback+0x84>
		}
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData) != HAL_OK){
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80011b0:	4917      	ldr	r1, [pc, #92]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80011b2:	4818      	ldr	r0, [pc, #96]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80011b4:	f001 f987 	bl	80024c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x3d2>
			Error_Handler();
 80011be:	f000 fad9 	bl	8001774 <Error_Handler>
		}
		if (count == hekichi2){
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d102      	bne.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x3e8>
			count = 0;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
		}
		count++;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011e8:	801a      	strh	r2, [r3, #0]
	}
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	c61c4000 	.word	0xc61c4000
 80011f8:	200002c0 	.word	0x200002c0
 80011fc:	20000094 	.word	0x20000094
 8001200:	20000098 	.word	0x20000098
 8001204:	20000010 	.word	0x20000010
 8001208:	ffffd8f1 	.word	0xffffd8f1
 800120c:	200002b0 	.word	0x200002b0
 8001210:	20000264 	.word	0x20000264
 8001214:	20000120 	.word	0x20000120
 8001218:	200002d0 	.word	0x200002d0
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d054      	beq.n	80012de <HAL_FDCAN_RxFifo0Callback+0xbe>

	        /* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan3, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 8001236:	4a2d      	ldr	r2, [pc, #180]	@ (80012ec <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	482d      	ldr	r0, [pc, #180]	@ (80012f0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800123c:	f001 f988 	bl	8002550 <HAL_FDCAN_GetRxMessage>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <HAL_FDCAN_RxFifo0Callback+0x30>
			printf("fdcan_getrxmessage is error\r\n");
 8001246:	482b      	ldr	r0, [pc, #172]	@ (80012f4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001248:	f004 ff3a 	bl	80060c0 <puts>
			Error_Handler();
 800124c:	f000 fa92 	bl	8001774 <Error_Handler>
		}
		for (int i=0; i<=3;i++){
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e040      	b.n	80012d8 <HAL_FDCAN_RxFifo0Callback+0xb8>
			if (RxHeader.Identifier == (robomas[i].CANID)) {
 8001256:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4927      	ldr	r1, [pc, #156]	@ (80012f8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	0152      	lsls	r2, r2, #5
 8001260:	440a      	add	r2, r1
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	4293      	cmp	r3, r2
 8001266:	d134      	bne.n	80012d2 <HAL_FDCAN_RxFifo0Callback+0xb2>
				robomas[i].angle = (int16_t)((RxData[0] << 8) | RxData[1]);
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f972 	bl	8000564 <__aeabi_i2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	481c      	ldr	r0, [pc, #112]	@ (80012f8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	0149      	lsls	r1, r1, #5
 800128a:	4401      	add	r1, r0
 800128c:	3110      	adds	r1, #16
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
				robomas[i].actVel = (int16_t)((RxData[2] << 8) | RxData[3]);
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 8001294:	789b      	ldrb	r3, [r3, #2]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800129c:	78db      	ldrb	r3, [r3, #3]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b219      	sxth	r1, r3
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	015b      	lsls	r3, r3, #5
 80012aa:	4413      	add	r3, r2
 80012ac:	3306      	adds	r3, #6
 80012ae:	460a      	mov	r2, r1
 80012b0:	801a      	strh	r2, [r3, #0]
				robomas[i].actCurrent = (int16_t)((RxData[4] << 8) | RxData[5]);
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 80012bc:	795b      	ldrb	r3, [r3, #5]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b219      	sxth	r1, r3
 80012c4:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	015b      	lsls	r3, r3, #5
 80012ca:	4413      	add	r3, r2
 80012cc:	3318      	adds	r3, #24
 80012ce:	460a      	mov	r2, r1
 80012d0:	801a      	strh	r2, [r3, #0]
		for (int i=0; i<=3;i++){
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	ddbb      	ble.n	8001256 <HAL_FDCAN_RxFifo0Callback+0x36>
			}
		}

	}

}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200002b8 	.word	0x200002b8
 80012ec:	20000288 	.word	0x20000288
 80012f0:	20000120 	.word	0x20000120
 80012f4:	08006f28 	.word	0x08006f28
 80012f8:	20000010 	.word	0x20000010

080012fc <FDCAN_RxSettings>:

void FDCAN_RxSettings(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef FDCAN_Filter_settings;
	FDCAN_Filter_settings.IdType = FDCAN_STANDARD_ID;
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
	FDCAN_Filter_settings.FilterIndex = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
	FDCAN_Filter_settings.FilterType = FDCAN_FILTER_RANGE;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
	FDCAN_Filter_settings.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800130e:	2301      	movs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
	FDCAN_Filter_settings.FilterID1 = 0x200;
 8001312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001316:	613b      	str	r3, [r7, #16]
	FDCAN_Filter_settings.FilterID2 = 0x210;
 8001318:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800131c:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN_Filter_settings) != HAL_OK){
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	481b      	ldr	r0, [pc, #108]	@ (8001390 <FDCAN_RxSettings+0x94>)
 8001324:	f001 f81c 	bl	8002360 <HAL_FDCAN_ConfigFilter>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <FDCAN_RxSettings+0x3c>
		printf("fdcan_configfilter is error\r\n");
 800132e:	4819      	ldr	r0, [pc, #100]	@ (8001394 <FDCAN_RxSettings+0x98>)
 8001330:	f004 fec6 	bl	80060c0 <puts>
		Error_Handler();
 8001334:	f000 fa1e 	bl	8001774 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_FILTER_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)){
 8001338:	2300      	movs	r3, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	2203      	movs	r2, #3
 8001340:	2102      	movs	r1, #2
 8001342:	4813      	ldr	r0, [pc, #76]	@ (8001390 <FDCAN_RxSettings+0x94>)
 8001344:	f001 f866 	bl	8002414 <HAL_FDCAN_ConfigGlobalFilter>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <FDCAN_RxSettings+0x5c>
		printf("fdcan_configglobalfilter is error\r\n");
 800134e:	4812      	ldr	r0, [pc, #72]	@ (8001398 <FDCAN_RxSettings+0x9c>)
 8001350:	f004 feb6 	bl	80060c0 <puts>
		Error_Handler();
 8001354:	f000 fa0e 	bl	8001774 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <FDCAN_RxSettings+0x94>)
 800135a:	f001 f88c 	bl	8002476 <HAL_FDCAN_Start>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <FDCAN_RxSettings+0x72>
		printf("fdcan_start is error\r\n");
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <FDCAN_RxSettings+0xa0>)
 8001366:	f004 feab 	bl	80060c0 <puts>
		Error_Handler();
 800136a:	f000 fa03 	bl	8001774 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	4807      	ldr	r0, [pc, #28]	@ (8001390 <FDCAN_RxSettings+0x94>)
 8001374:	f001 f9f4 	bl	8002760 <HAL_FDCAN_ActivateNotification>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <FDCAN_RxSettings+0x8c>
		printf("fdcan_activatenotification is error\r\n");
 800137e:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <FDCAN_RxSettings+0xa4>)
 8001380:	f004 fe9e 	bl	80060c0 <puts>
		Error_Handler();
 8001384:	f000 f9f6 	bl	8001774 <Error_Handler>
	}
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000120 	.word	0x20000120
 8001394:	08006f48 	.word	0x08006f48
 8001398:	08006f68 	.word	0x08006f68
 800139c:	08006f8c 	.word	0x08006f8c
 80013a0:	08006fa4 	.word	0x08006fa4

080013a4 <FDCAN_TxSettings>:

void FDCAN_TxSettings(void) {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	  TxHeader.Identifier = 0x000;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013bc:	2208      	movs	r2, #8
 80013be:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <FDCAN_TxSettings+0x44>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000264 	.word	0x20000264

080013ec <_write>:

int _write(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	230a      	movs	r3, #10
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <_write+0x24>)
 8001402:	f003 fae3 	bl	80049cc <HAL_UART_Transmit>
    return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200001d0 	.word	0x200001d0

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800141a:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <main+0xc4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f004 fe54 	bl	80060d0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f000 fbdd 	bl	8001be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f866 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 f97c 	bl	800172c <MX_GPIO_Init>
  MX_FDCAN3_Init();
 8001434:	f000 f8ae 	bl	8001594 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 8001438:	f000 f8f4 	bl	8001624 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800143c:	f000 f928 	bl	8001690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("start\r\n");
 8001440:	4826      	ldr	r0, [pc, #152]	@ (80014dc <main+0xc8>)
 8001442:	f004 fe3d 	bl	80060c0 <puts>

  FDCAN_TxSettings();
 8001446:	f7ff ffad 	bl	80013a4 <FDCAN_TxSettings>
  FDCAN_RxSettings();
 800144a:	f7ff ff57 	bl	80012fc <FDCAN_RxSettings>

  printf("can_start\r\n");
 800144e:	4824      	ldr	r0, [pc, #144]	@ (80014e0 <main+0xcc>)
 8001450:	f004 fe36 	bl	80060c0 <puts>

  TxHeader.Identifier = 0x200;
 8001454:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <main+0xd0>)
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 800145c:	4822      	ldr	r0, [pc, #136]	@ (80014e8 <main+0xd4>)
 800145e:	f002 fee5 	bl	800422c <HAL_TIM_Base_Start_IT>
  robomas[R_F-1].trgVel = (int)(32 * 36);
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <main+0xd8>)
 8001464:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001468:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  robomas[R_B-1].trgVel = (int)(32 * 36);
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <main+0xd8>)
 800146e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001472:	809a      	strh	r2, [r3, #4]
  robomas[L_F-1].trgVel =  (int)(-32 * 36);
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <main+0xd8>)
 8001476:	f64f 3280 	movw	r2, #64384	@ 0xfb80
 800147a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  robomas[L_B-1].trgVel = (int)(-32 * 36);
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <main+0xd8>)
 8001480:	f64f 3280 	movw	r2, #64384	@ 0xfb80
 8001484:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("count:%d,purpose:%d,cu:%d,trgVel:%d,actVel:%d,hensa:%d\r\n", count, purpose, robomas[0].cu, robomas[0].trgVel, robomas[0].actVel, (int)robomas[0].hensa);
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <main+0xdc>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	4618      	mov	r0, r3
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <main+0xe0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b21b      	sxth	r3, r3
 8001494:	461c      	mov	r4, r3
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <main+0xd8>)
 8001498:	895b      	ldrh	r3, [r3, #10]
 800149a:	b21b      	sxth	r3, r3
 800149c:	461d      	mov	r5, r3
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <main+0xd8>)
 80014a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <main+0xd8>)
 80014a8:	88db      	ldrh	r3, [r3, #6]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4619      	mov	r1, r3
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <main+0xd8>)
 80014b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80014b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	9101      	str	r1, [sp, #4]
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	462b      	mov	r3, r5
 80014c4:	4622      	mov	r2, r4
 80014c6:	4601      	mov	r1, r0
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <main+0xe4>)
 80014ca:	f004 fd91 	bl	8005ff0 <iprintf>
	  HAL_Delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 fbfa 	bl	8001cc8 <HAL_Delay>
	  printf("count:%d,purpose:%d,cu:%d,trgVel:%d,actVel:%d,hensa:%d\r\n", count, purpose, robomas[0].cu, robomas[0].trgVel, robomas[0].actVel, (int)robomas[0].hensa);
 80014d4:	bf00      	nop
 80014d6:	e7d6      	b.n	8001486 <main+0x72>
 80014d8:	200000b4 	.word	0x200000b4
 80014dc:	08006fcc 	.word	0x08006fcc
 80014e0:	08006fd4 	.word	0x08006fd4
 80014e4:	20000264 	.word	0x20000264
 80014e8:	20000184 	.word	0x20000184
 80014ec:	20000010 	.word	0x20000010
 80014f0:	200002d0 	.word	0x200002d0
 80014f4:	20000000 	.word	0x20000000
 80014f8:	08006fe0 	.word	0x08006fe0

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2238      	movs	r2, #56	@ 0x38
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f004 ff74 	bl	80063f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001522:	f001 fdfb 	bl	800311c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2340      	movs	r3, #64	@ 0x40
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800153c:	2301      	movs	r3, #1
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001540:	230a      	movs	r3, #10
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fe95 	bl	8003284 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001560:	f000 f908 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2303      	movs	r3, #3
 800156a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f002 f993 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001588:	f000 f8f4 	bl	8001774 <Error_Handler>
  }
}
 800158c:	bf00      	nop
 800158e:	3750      	adds	r7, #80	@ 0x50
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <MX_FDCAN3_Init+0x88>)
 800159a:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <MX_FDCAN3_Init+0x8c>)
 800159c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015aa:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015d2:	220f      	movs	r2, #15
 80015d4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015d8:	2204      	movs	r2, #4
 80015da:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 2;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015de:	2202      	movs	r2, #2
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 15;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015ea:	220f      	movs	r2, #15
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <MX_FDCAN3_Init+0x88>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_FDCAN3_Init+0x88>)
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_FDCAN3_Init+0x88>)
 8001608:	f000 fd50 	bl	80020ac <HAL_FDCAN_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8001612:	f000 f8af 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000120 	.word	0x20000120
 8001620:	40006c00 	.word	0x40006c00

08001624 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_TIM6_Init+0x64>)
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <MX_TIM6_Init+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <MX_TIM6_Init+0x64>)
 800163c:	2209      	movs	r2, #9
 800163e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_TIM6_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_TIM6_Init+0x64>)
 8001648:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800164c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_TIM6_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <MX_TIM6_Init+0x64>)
 8001656:	f002 fd91 	bl	800417c <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001660:	f000 f888 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_TIM6_Init+0x64>)
 8001672:	f003 f87f 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800167c:	f000 f87a 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000184 	.word	0x20000184
 800168c:	40001000 	.word	0x40001000

08001690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 8001696:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <MX_USART2_UART_Init+0x94>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 800169c:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <MX_USART2_UART_Init+0x98>)
 800169e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016b4:	220c      	movs	r2, #12
 80016b6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016be:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c4:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d6:	4812      	ldr	r0, [pc, #72]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016d8:	f003 f928 	bl	800492c <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80016e2:	f000 f847 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016ea:	f004 faf4 	bl	8005cd6 <HAL_UARTEx_SetTxFifoThreshold>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80016f4:	f000 f83e 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4809      	ldr	r0, [pc, #36]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 80016fc:	f004 fb29 	bl	8005d52 <HAL_UARTEx_SetRxFifoThreshold>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001706:	f000 f835 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_USART2_UART_Init+0x90>)
 800170c:	f004 faaa 	bl	8005c64 <HAL_UARTEx_DisableFifoMode>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001716:	f000 f82d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001d0 	.word	0x200001d0
 8001724:	40004400 	.word	0x40004400
 8001728:	000f4240 	.word	0x000f4240

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_GPIO_Init+0x44>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <MX_GPIO_Init+0x44>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_GPIO_Init+0x44>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_GPIO_Init+0x44>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <MX_GPIO_Init+0x44>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_GPIO_Init+0x44>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\r\n");
 800177c:	4801      	ldr	r0, [pc, #4]	@ (8001784 <Error_Handler+0x10>)
 800177e:	f004 fc9f 	bl	80060c0 <puts>
 8001782:	e7fb      	b.n	800177c <Error_Handler+0x8>
 8001784:	0800701c 	.word	0x0800701c

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_MspInit+0x44>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001792:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <HAL_MspInit+0x44>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6613      	str	r3, [r2, #96]	@ 0x60
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_MspInit+0x44>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_MspInit+0x44>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017aa:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <HAL_MspInit+0x44>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_MspInit+0x44>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017be:	f001 fd51 	bl	8003264 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b09e      	sub	sp, #120	@ 0x78
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	2254      	movs	r2, #84	@ 0x54
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fe01 	bl	80063f8 <memset>
  if(hfdcan->Instance==FDCAN3)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <HAL_FDCAN_MspInit+0xc8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d147      	bne.n	8001890 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001804:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fa65 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800181c:	f7ff ffaa 	bl	8001774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <HAL_FDCAN_MspInit+0xcc>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_FDCAN_MspInit+0xcc>)
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800182a:	6593      	str	r3, [r2, #88]	@ 0x58
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_FDCAN_MspInit+0xcc>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_FDCAN_MspInit+0xcc>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183c:	4a17      	ldr	r2, [pc, #92]	@ (800189c <HAL_FDCAN_MspInit+0xcc>)
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001844:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_FDCAN_MspInit+0xcc>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001850:	2318      	movs	r3, #24
 8001852:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8001860:	230b      	movs	r3, #11
 8001862:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <HAL_FDCAN_MspInit+0xd0>)
 800186c:	f001 fad4 	bl	8002e18 <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2058      	movs	r0, #88	@ 0x58
 8001876:	f000 fb24 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 800187a:	2058      	movs	r0, #88	@ 0x58
 800187c:	f000 fb3b 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2059      	movs	r0, #89	@ 0x59
 8001886:	f000 fb1c 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 800188a:	2059      	movs	r0, #89	@ 0x59
 800188c:	f000 fb33 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3778      	adds	r7, #120	@ 0x78
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40006c00 	.word	0x40006c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000400 	.word	0x48000400

080018a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_TIM_Base_MspInit+0x44>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d113      	bne.n	80018de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_TIM_Base_MspInit+0x48>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <HAL_TIM_Base_MspInit+0x48>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_TIM_Base_MspInit+0x48>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2036      	movs	r0, #54	@ 0x36
 80018d4:	f000 faf5 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018d8:	2036      	movs	r0, #54	@ 0x36
 80018da:	f000 fb0c 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40001000 	.word	0x40001000
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09e      	sub	sp, #120	@ 0x78
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	2254      	movs	r2, #84	@ 0x54
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fd71 	bl	80063f8 <memset>
  if(huart->Instance==USART2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <HAL_UART_MspInit+0xb8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d13e      	bne.n	800199e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	4618      	mov	r0, r3
 800192e:	f002 f9d7 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001938:	f7ff ff1c 	bl	8001774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_UART_MspInit+0xbc>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	4a1a      	ldr	r2, [pc, #104]	@ (80019ac <HAL_UART_MspInit+0xbc>)
 8001942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001946:	6593      	str	r3, [r2, #88]	@ 0x58
 8001948:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <HAL_UART_MspInit+0xbc>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <HAL_UART_MspInit+0xbc>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <HAL_UART_MspInit+0xbc>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_UART_MspInit+0xbc>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800196c:	230c      	movs	r3, #12
 800196e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197c:	2307      	movs	r3, #7
 800197e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198a:	f001 fa45 	bl	8002e18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2026      	movs	r0, #38	@ 0x26
 8001994:	f000 fa95 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001998:	2026      	movs	r0, #38	@ 0x26
 800199a:	f000 faac 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3778      	adds	r7, #120	@ 0x78
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40021000 	.word	0x40021000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a06:	f000 f941 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <USART2_IRQHandler+0x10>)
 8001a16:	f003 f867 	bl	8004ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200001d0 	.word	0x200001d0

08001a24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <TIM6_DAC_IRQHandler+0x10>)
 8001a2a:	f002 fc77 	bl	800431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000184 	.word	0x20000184

08001a38 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <FDCAN3_IT0_IRQHandler+0x10>)
 8001a3e:	f000 ff75 	bl	800292c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000120 	.word	0x20000120

08001a4c <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <FDCAN3_IT1_IRQHandler+0x10>)
 8001a52:	f000 ff6b 	bl	800292c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000120 	.word	0x20000120

08001a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e00a      	b.n	8001a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a72:	f3af 8000 	nop.w
 8001a76:	4601      	mov	r1, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	b2ca      	uxtb	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf0      	blt.n	8001a72 <_read+0x12>
  }

  return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f004 fcae 	bl	8006494 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20020000 	.word	0x20020000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	200002d4 	.word	0x200002d4
 8001b6c:	20000428 	.word	0x20000428

08001b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b94:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b98:	f7ff ffea 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LoopForever+0xe>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001be0 <LoopForever+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f004 fc6d 	bl	80064a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc6:	f7ff fc25 	bl	8001414 <main>

08001bca <LoopForever>:

LoopForever:
    b LoopForever
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
  ldr   r0, =_estack
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001bd8:	080070b8 	.word	0x080070b8
  ldr r2, =_sbss
 8001bdc:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001be0:	20000428 	.word	0x20000428

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>

08001be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f95b 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f80e 	bl	8001c18 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	e001      	b.n	8001c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c08:	f7ff fdbe 	bl	8001788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <HAL_InitTick+0x68>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_InitTick+0x6c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <HAL_InitTick+0x68>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f966 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	d809      	bhi.n	8001c66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c52:	2200      	movs	r2, #0
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5a:	f000 f932 	bl	8001ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_InitTick+0x70>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e007      	b.n	8001c76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e004      	b.n	8001c76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e001      	b.n	8001c76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200000a4 	.word	0x200000a4
 8001c84:	2000009c 	.word	0x2000009c
 8001c88:	200000a0 	.word	0x200000a0

08001c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_IncTick+0x1c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_IncTick+0x20>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a03      	ldr	r2, [pc, #12]	@ (8001ca8 <HAL_IncTick+0x1c>)
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	200002d8 	.word	0x200002d8
 8001cac:	200000a4 	.word	0x200000a4

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200002d8 	.word	0x200002d8

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d004      	beq.n	8001cec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_Delay+0x40>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cec:	bf00      	nop
 8001cee:	f7ff ffdf 	bl	8001cb0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d8f7      	bhi.n	8001cee <HAL_Delay+0x26>
  {
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200000a4 	.word	0x200000a4

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff40 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff90 	bl	8001e00 <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5f 	bl	8001dac <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff33 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa4 	bl	8001e68 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d005      	beq.n	8001f4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2204      	movs	r2, #4
 8001f46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e037      	b.n	8001fbe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 020e 	bic.w	r2, r2, #14
 8001f5c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f6c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f003 021f 	and.w	r2, r3, #31
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f9a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00c      	beq.n	8001fbe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fbc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d00d      	beq.n	8002010 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e047      	b.n	80020a0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020e 	bic.w	r2, r2, #14
 800201e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800203e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800205c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002074:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800207e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
    }
  }
  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e147      	b.n	800234e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fb7c 	bl	80017d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0210 	bic.w	r2, r2, #16
 80020e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e8:	f7ff fde2 	bl	8001cb0 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020ee:	e012      	b.n	8002116 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020f0:	f7ff fdde 	bl	8001cb0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b0a      	cmp	r3, #10
 80020fc:	d90b      	bls.n	8002116 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e11b      	b.n	800234e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b08      	cmp	r3, #8
 8002122:	d0e5      	beq.n	80020f0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002134:	f7ff fdbc 	bl	8001cb0 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800213a:	e012      	b.n	8002162 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800213c:	f7ff fdb8 	bl	8001cb0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b0a      	cmp	r3, #10
 8002148:	d90b      	bls.n	8002162 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2203      	movs	r2, #3
 800215a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0f5      	b.n	800234e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0e5      	beq.n	800213c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0202 	orr.w	r2, r2, #2
 800217e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a74      	ldr	r2, [pc, #464]	@ (8002358 <HAL_FDCAN_Init+0x2ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d103      	bne.n	8002192 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800218a:	4a74      	ldr	r2, [pc, #464]	@ (800235c <HAL_FDCAN_Init+0x2b0>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7c1b      	ldrb	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021a8:	619a      	str	r2, [r3, #24]
 80021aa:	e007      	b.n	80021bc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7c5b      	ldrb	r3, [r3, #17]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021d2:	619a      	str	r2, [r3, #24]
 80021d4:	e007      	b.n	80021e6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7c9b      	ldrb	r3, [r3, #18]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021fc:	619a      	str	r2, [r3, #24]
 80021fe:	e007      	b.n	8002210 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800220e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002234:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0210 	bic.w	r2, r2, #16
 8002244:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	619a      	str	r2, [r3, #24]
 800225e:	e02c      	b.n	80022ba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d028      	beq.n	80022ba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d01c      	beq.n	80022aa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800227e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0210 	orr.w	r2, r2, #16
 800228e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d110      	bne.n	80022ba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0220 	orr.w	r2, r2, #32
 80022a6:	619a      	str	r2, [r3, #24]
 80022a8:	e007      	b.n	80022ba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0220 	orr.w	r2, r2, #32
 80022b8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	3b01      	subs	r3, #1
 80022c0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022ca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022d2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	3b01      	subs	r3, #1
 80022dc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022e2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022e4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022ee:	d115      	bne.n	800231c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	3b01      	subs	r3, #1
 80022fc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022fe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	3b01      	subs	r3, #1
 8002306:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002308:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	3b01      	subs	r3, #1
 8002312:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002318:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800231a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fc88 	bl	8002c48 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40006400 	.word	0x40006400
 800235c:	40006500 	.word	0x40006500

08002360 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002370:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d002      	beq.n	800237e <HAL_FDCAN_ConfigFilter+0x1e>
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d13d      	bne.n	80023fa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d119      	bne.n	80023ba <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002392:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800239a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e01d      	b.n	80023f6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	075a      	lsls	r2, r3, #29
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	079a      	lsls	r2, r3, #30
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3304      	adds	r3, #4
 80023ee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e006      	b.n	8002408 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d116      	bne.n	800245c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002436:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011a      	lsls	r2, r3, #4
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	431a      	orrs	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	431a      	orrs	r2, r3
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e006      	b.n	800246a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d110      	bne.n	80024ac <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e006      	b.n	80024ba <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d12c      	bne.n	8002538 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80024e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e023      	b.n	8002546 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fc03 	bl	8002d20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800252a:	2201      	movs	r2, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e006      	b.n	8002546 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253c:	f043 0208 	orr.w	r2, r3, #8
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002550:	b480      	push	{r7}
 8002552:	b08b      	sub	sp, #44	@ 0x2c
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002568:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800256a:	7efb      	ldrb	r3, [r7, #27]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f040 80e8 	bne.w	8002742 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b40      	cmp	r3, #64	@ 0x40
 8002576:	d137      	bne.n	80025e8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0db      	b.n	8002750 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10a      	bne.n	80025c0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80025bc:	2301      	movs	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e6:	e036      	b.n	8002656 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0a3      	b.n	8002750 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002610:	0e1b      	lsrs	r3, r3, #24
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10a      	bne.n	8002630 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e005      	b.n	8002686 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	3304      	adds	r3, #4
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e1b      	lsrs	r3, r3, #24
 80026da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0fda      	lsrs	r2, r3, #31
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	3304      	adds	r3, #4
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	e00a      	b.n	8002712 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	441a      	add	r2, r3
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	440b      	add	r3, r1
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	3301      	adds	r3, #1
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4a11      	ldr	r2, [pc, #68]	@ (800275c <HAL_FDCAN_GetRxMessage+0x20c>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	461a      	mov	r2, r3
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	4293      	cmp	r3, r2
 8002720:	d3ec      	bcc.n	80026fc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b40      	cmp	r3, #64	@ 0x40
 8002726:	d105      	bne.n	8002734 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002732:	e004      	b.n	800273e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e006      	b.n	8002750 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002746:	f043 0208 	orr.w	r2, r3, #8
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	372c      	adds	r7, #44	@ 0x2c
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	0800703c 	.word	0x0800703c

08002760 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002772:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d003      	beq.n	8002782 <HAL_FDCAN_ActivateNotification+0x22>
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b02      	cmp	r3, #2
 800277e:	f040 80c8 	bne.w	8002912 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03b      	beq.n	8002816 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d031      	beq.n	8002816 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d027      	beq.n	8002816 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01d      	beq.n	8002816 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d013      	beq.n	8002816 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00c      	beq.n	8002826 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d13b      	bne.n	80028b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d131      	bne.n	80028b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d127      	bne.n	80028b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11d      	bne.n	80028b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0202 	orr.w	r2, r2, #2
 80028c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	430a      	orrs	r2, r1
 80028dc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	430a      	orrs	r2, r1
 800290c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e006      	b.n	8002920 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	@ 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002948:	4013      	ands	r3, r2
 800294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002960:	4013      	ands	r3, r2
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4013      	ands	r3, r2
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002982:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002986:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	6a3a      	ldr	r2, [r7, #32]
 8002990:	4013      	ands	r3, r2
 8002992:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800299e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ba:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f916 	bl	8002c0a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d019      	beq.n	8002a1c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d014      	beq.n	8002a1c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029fa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8d8 	bl	8002bcc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f8a2 	bl	8002b76 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fbec 	bl	8001220 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002a56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f897 	bl	8002b8c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f890 	bl	8002ba2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d013      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002a9e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	@ 0x80
 8002ab4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f87c 	bl	8002bb6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ada:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f880 	bl	8002be2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002afe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f878 	bl	8002bf6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00f      	beq.n	8002b30 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f876 	bl	8002c32 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f858 	bl	8002c1e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3730      	adds	r7, #48	@ 0x30
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002c50:	4b30      	ldr	r3, [pc, #192]	@ (8002d14 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002c52:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d103      	bne.n	8002c66 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002c64:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d103      	bne.n	8002c78 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8002c76:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c86:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	041a      	lsls	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	061a      	lsls	r2, r3, #24
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e005      	b.n	8002cfa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3f3      	bcc.n	8002cee <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	4000a400 	.word	0x4000a400
 8002d18:	40006800 	.word	0x40006800
 8002d1c:	40006c00 	.word	0x40006c00

08002d20 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002d3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e00a      	b.n	8002d62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002d54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002d5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002d72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002d78:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	3304      	adds	r3, #4
 8002dac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e020      	b.n	8002df6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3303      	adds	r3, #3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	440b      	add	r3, r1
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002dcc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	440b      	add	r3, r1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002dda:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	440a      	add	r2, r1
 8002de2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002de4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3304      	adds	r3, #4
 8002dee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3304      	adds	r3, #4
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <FDCAN_CopyMessageToRAM+0xf4>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d3d6      	bcc.n	8002db4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3724      	adds	r7, #36	@ 0x24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	0800703c 	.word	0x0800703c

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e26:	e15a      	b.n	80030de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	4013      	ands	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 814c 	beq.w	80030d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d005      	beq.n	8002e58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d130      	bne.n	8002eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e8e:	2201      	movs	r2, #1
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 0201 	and.w	r2, r3, #1
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d017      	beq.n	8002ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d123      	bne.n	8002f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	08da      	lsrs	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3208      	adds	r2, #8
 8002f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	220f      	movs	r2, #15
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	08da      	lsrs	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3208      	adds	r2, #8
 8002f44:	6939      	ldr	r1, [r7, #16]
 8002f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0203 	and.w	r2, r3, #3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80a6 	beq.w	80030d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80030fc <HAL_GPIO_Init+0x2e4>)
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f90:	4a5a      	ldr	r2, [pc, #360]	@ (80030fc <HAL_GPIO_Init+0x2e4>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f98:	4b58      	ldr	r3, [pc, #352]	@ (80030fc <HAL_GPIO_Init+0x2e4>)
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fa4:	4a56      	ldr	r2, [pc, #344]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	3302      	adds	r3, #2
 8002fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	220f      	movs	r2, #15
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fce:	d01f      	beq.n	8003010 <HAL_GPIO_Init+0x1f8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8003104 <HAL_GPIO_Init+0x2ec>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d019      	beq.n	800300c <HAL_GPIO_Init+0x1f4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <HAL_GPIO_Init+0x2f0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_GPIO_Init+0x1f0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800310c <HAL_GPIO_Init+0x2f4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00d      	beq.n	8003004 <HAL_GPIO_Init+0x1ec>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a49      	ldr	r2, [pc, #292]	@ (8003110 <HAL_GPIO_Init+0x2f8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <HAL_GPIO_Init+0x1e8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a48      	ldr	r2, [pc, #288]	@ (8003114 <HAL_GPIO_Init+0x2fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_GPIO_Init+0x1e4>
 8002ff8:	2305      	movs	r3, #5
 8002ffa:	e00a      	b.n	8003012 <HAL_GPIO_Init+0x1fa>
 8002ffc:	2306      	movs	r3, #6
 8002ffe:	e008      	b.n	8003012 <HAL_GPIO_Init+0x1fa>
 8003000:	2304      	movs	r3, #4
 8003002:	e006      	b.n	8003012 <HAL_GPIO_Init+0x1fa>
 8003004:	2303      	movs	r3, #3
 8003006:	e004      	b.n	8003012 <HAL_GPIO_Init+0x1fa>
 8003008:	2302      	movs	r3, #2
 800300a:	e002      	b.n	8003012 <HAL_GPIO_Init+0x1fa>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_GPIO_Init+0x1fa>
 8003010:	2300      	movs	r3, #0
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	f002 0203 	and.w	r2, r2, #3
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	4093      	lsls	r3, r2
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003022:	4937      	ldr	r1, [pc, #220]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003030:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_GPIO_Init+0x300>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003054:	4a30      	ldr	r2, [pc, #192]	@ (8003118 <HAL_GPIO_Init+0x300>)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800305a:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <HAL_GPIO_Init+0x300>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800307e:	4a26      	ldr	r2, [pc, #152]	@ (8003118 <HAL_GPIO_Init+0x300>)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003084:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_GPIO_Init+0x300>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <HAL_GPIO_Init+0x300>)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <HAL_GPIO_Init+0x300>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030d2:	4a11      	ldr	r2, [pc, #68]	@ (8003118 <HAL_GPIO_Init+0x300>)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3301      	adds	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f ae9d 	bne.w	8002e28 <HAL_GPIO_Init+0x10>
  }
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010000 	.word	0x40010000
 8003104:	48000400 	.word	0x48000400
 8003108:	48000800 	.word	0x48000800
 800310c:	48000c00 	.word	0x48000c00
 8003110:	48001000 	.word	0x48001000
 8003114:	48001400 	.word	0x48001400
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d141      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800312a:	4b4b      	ldr	r3, [pc, #300]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003136:	d131      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003138:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800313e:	4a46      	ldr	r2, [pc, #280]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003144:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003150:	4a41      	ldr	r2, [pc, #260]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003158:	4b40      	ldr	r3, [pc, #256]	@ (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2232      	movs	r2, #50	@ 0x32
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a3f      	ldr	r2, [pc, #252]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800316e:	e002      	b.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3b01      	subs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003176:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003182:	d102      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003196:	d158      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e057      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031ac:	e04d      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b4:	d141      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031b6:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c2:	d131      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c4:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ca:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2232      	movs	r2, #50	@ 0x32
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	3301      	adds	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fa:	e002      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320e:	d102      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f2      	bne.n	80031fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003222:	d112      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e011      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003234:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003238:	e007      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003242:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003248:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40007000 	.word	0x40007000
 800325c:	2000009c 	.word	0x2000009c
 8003260:	431bde83 	.word	0x431bde83

08003264 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003268:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a04      	ldr	r2, [pc, #16]	@ (8003280 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800326e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003272:	6093      	str	r3, [r2, #8]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e2fe      	b.n	8003894 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d075      	beq.n	800338e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a2:	4b97      	ldr	r3, [pc, #604]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ac:	4b94      	ldr	r3, [pc, #592]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3e>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d002      	beq.n	80032c8 <HAL_RCC_OscConfig+0x44>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e2d9      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x74>
 80032ea:	4b85      	ldr	r3, [pc, #532]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a84      	ldr	r2, [pc, #528]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7e      	ldr	r2, [pc, #504]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b7c      	ldr	r3, [pc, #496]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7b      	ldr	r2, [pc, #492]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 800331c:	4b78      	ldr	r3, [pc, #480]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a77      	ldr	r2, [pc, #476]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b75      	ldr	r3, [pc, #468]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a74      	ldr	r2, [pc, #464]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fcb8 	bl	8001cb0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fcb4 	bl	8001cb0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e29e      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003356:	4b6a      	ldr	r3, [pc, #424]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fca4 	bl	8001cb0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fca0 	bl	8001cb0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e28a      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337e:	4b60      	ldr	r3, [pc, #384]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b59      	ldr	r3, [pc, #356]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a4:	4b56      	ldr	r3, [pc, #344]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x136>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_OscConfig+0x13c>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11f      	bne.n	8003400 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x154>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e25d      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b49      	ldr	r3, [pc, #292]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	4946      	ldr	r1, [pc, #280]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033ec:	4b45      	ldr	r3, [pc, #276]	@ (8003504 <HAL_RCC_OscConfig+0x280>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe fc11 	bl	8001c18 <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d043      	beq.n	8003484 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e249      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b3d      	ldr	r3, [pc, #244]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe fc4c 	bl	8001cb0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7fe fc48 	bl	8001cb0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e232      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342e:	4b34      	ldr	r3, [pc, #208]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	492d      	ldr	r1, [pc, #180]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
 800344e:	e01a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003450:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2a      	ldr	r2, [pc, #168]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003456:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fc28 	bl	8001cb0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe fc24 	bl	8001cb0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e20e      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003476:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x1e0>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d041      	beq.n	8003516 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a0:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fe fc01 	bl	8001cb0 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe fbfd 	bl	8001cb0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1e7      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ef      	beq.n	80034b2 <HAL_RCC_OscConfig+0x22e>
 80034d2:	e020      	b.n	8003516 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034da:	4a09      	ldr	r2, [pc, #36]	@ (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fbe4 	bl	8001cb0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ea:	e00d      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe fbe0 	bl	8001cb0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d906      	bls.n	8003508 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1ca      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	200000a0 	.word	0x200000a0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003508:	4b8c      	ldr	r3, [pc, #560]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ea      	bne.n	80034ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a6 	beq.w	8003670 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003528:	4b84      	ldr	r3, [pc, #528]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_OscConfig+0x2b4>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x2b6>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4b7f      	ldr	r3, [pc, #508]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	4a7e      	ldr	r2, [pc, #504]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	@ 0x58
 800354a:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	@ (8003740 <HAL_RCC_OscConfig+0x4bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	@ (8003740 <HAL_RCC_OscConfig+0x4bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x4bc>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fb9d 	bl	8001cb0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fb99 	bl	8001cb0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e183      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	@ (8003740 <HAL_RCC_OscConfig+0x4bc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d108      	bne.n	80035b2 <HAL_RCC_OscConfig+0x32e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	4a65      	ldr	r2, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b0:	e024      	b.n	80035fc <HAL_RCC_OscConfig+0x378>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d110      	bne.n	80035dc <HAL_RCC_OscConfig+0x358>
 80035ba:	4b60      	ldr	r3, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	4a5e      	ldr	r2, [pc, #376]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ca:	4b5c      	ldr	r3, [pc, #368]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d0:	4a5a      	ldr	r2, [pc, #360]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035da:	e00f      	b.n	80035fc <HAL_RCC_OscConfig+0x378>
 80035dc:	4b57      	ldr	r3, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	4a56      	ldr	r2, [pc, #344]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ec:	4b53      	ldr	r3, [pc, #332]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe fb54 	bl	8001cb0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe fb50 	bl	8001cb0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e138      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	4b46      	ldr	r3, [pc, #280]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ed      	beq.n	800360c <HAL_RCC_OscConfig+0x388>
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe fb3d 	bl	8001cb0 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe fb39 	bl	8001cb0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e121      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003650:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ed      	bne.n	800363a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4b35      	ldr	r3, [pc, #212]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003668:	4a34      	ldr	r2, [pc, #208]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800366e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01c      	beq.n	80036be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003684:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368a:	4a2c      	ldr	r2, [pc, #176]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe fb0c 	bl	8001cb0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369c:	f7fe fb08 	bl	8001cb0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0f2      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ef      	beq.n	800369c <HAL_RCC_OscConfig+0x418>
 80036bc:	e01b      	b.n	80036f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036be:	4b1f      	ldr	r3, [pc, #124]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c4:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe faef 	bl	8001cb0 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d6:	f7fe faeb 	bl	8001cb0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0d5      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e8:	4b14      	ldr	r3, [pc, #80]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ef      	bne.n	80036d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80c9 	beq.w	8003892 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003700:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b0c      	cmp	r3, #12
 800370a:	f000 8083 	beq.w	8003814 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d15e      	bne.n	80037d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a08      	ldr	r2, [pc, #32]	@ (800373c <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe fac5 	bl	8001cb0 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	e00c      	b.n	8003744 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe fac1 	bl	8001cb0 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d905      	bls.n	8003744 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0ab      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003744:	4b55      	ldr	r3, [pc, #340]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ec      	bne.n	800372a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003750:	4b52      	ldr	r3, [pc, #328]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b52      	ldr	r3, [pc, #328]	@ (80038a0 <HAL_RCC_OscConfig+0x61c>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6a11      	ldr	r1, [r2, #32]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003760:	3a01      	subs	r2, #1
 8003762:	0112      	lsls	r2, r2, #4
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800376a:	0212      	lsls	r2, r2, #8
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003772:	0852      	lsrs	r2, r2, #1
 8003774:	3a01      	subs	r2, #1
 8003776:	0552      	lsls	r2, r2, #21
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800377e:	0852      	lsrs	r2, r2, #1
 8003780:	3a01      	subs	r2, #1
 8003782:	0652      	lsls	r2, r2, #25
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800378a:	06d2      	lsls	r2, r2, #27
 800378c:	430a      	orrs	r2, r1
 800378e:	4943      	ldr	r1, [pc, #268]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 8003790:	4313      	orrs	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b41      	ldr	r3, [pc, #260]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a40      	ldr	r2, [pc, #256]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800379e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a0:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a3d      	ldr	r2, [pc, #244]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fa80 	bl	8001cb0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fa7c 	bl	8001cb0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e066      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	4b35      	ldr	r3, [pc, #212]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x530>
 80037d2:	e05e      	b.n	8003892 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b31      	ldr	r3, [pc, #196]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a30      	ldr	r2, [pc, #192]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fa66 	bl	8001cb0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fa62 	bl	8001cb0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04c      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fa:	4b28      	ldr	r3, [pc, #160]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003806:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	4924      	ldr	r1, [pc, #144]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_OscConfig+0x620>)
 800380e:	4013      	ands	r3, r2
 8003810:	60cb      	str	r3, [r1, #12]
 8003812:	e03e      	b.n	8003892 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e039      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003820:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_OscConfig+0x618>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	d12c      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d123      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d11b      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d113      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	019f800c 	.word	0x019f800c
 80038a4:	feeefffc 	.word	0xfeeefffc

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e11e      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d910      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 020f 	bic.w	r2, r3, #15
 80038d6:	498c      	ldr	r1, [pc, #560]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b8a      	ldr	r3, [pc, #552]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e106      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d073      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d129      	bne.n	8003958 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003904:	4b81      	ldr	r3, [pc, #516]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0f4      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003914:	f000 f99e 	bl	8003c54 <RCC_GetSysClockFreqFromPLLSource>
 8003918:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b10 <HAL_RCC_ClockConfig+0x268>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d93f      	bls.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003922:	4b7a      	ldr	r3, [pc, #488]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d033      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d12f      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003942:	4b72      	ldr	r3, [pc, #456]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800394a:	4a70      	ldr	r2, [pc, #448]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 800394c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003950:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003952:	2380      	movs	r3, #128	@ 0x80
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e024      	b.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d107      	bne.n	8003970 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003960:	4b6a      	ldr	r3, [pc, #424]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0c6      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003970:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0be      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003980:	f000 f8ce 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003984:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4a61      	ldr	r2, [pc, #388]	@ (8003b10 <HAL_RCC_ClockConfig+0x268>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d909      	bls.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800398e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003996:	4a5d      	ldr	r2, [pc, #372]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800399c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4957      	ldr	r1, [pc, #348]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fe f97c 	bl	8001cb0 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fe f978 	bl	8001cb0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e095      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d023      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b43      	ldr	r3, [pc, #268]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a42      	ldr	r2, [pc, #264]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a14:	4b3d      	ldr	r3, [pc, #244]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b39      	ldr	r3, [pc, #228]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4936      	ldr	r1, [pc, #216]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a3e:	4b33      	ldr	r3, [pc, #204]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d21d      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a58:	4b2b      	ldr	r3, [pc, #172]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 020f 	bic.w	r2, r3, #15
 8003a60:	4929      	ldr	r1, [pc, #164]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a68:	f7fe f922 	bl	8001cb0 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fe f91e 	bl	8001cb0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e03b      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1ed      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4917      	ldr	r1, [pc, #92]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003abe:	4b13      	ldr	r3, [pc, #76]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	490f      	ldr	r1, [pc, #60]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad2:	f000 f825 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	490c      	ldr	r1, [pc, #48]	@ (8003b14 <HAL_RCC_ClockConfig+0x26c>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <HAL_RCC_ClockConfig+0x270>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_RCC_ClockConfig+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe f88e 	bl	8001c18 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	04c4b400 	.word	0x04c4b400
 8003b14:	08007024 	.word	0x08007024
 8003b18:	2000009c 	.word	0x2000009c
 8003b1c:	200000a0 	.word	0x200000a0

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b26:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b32:	4b2a      	ldr	r3, [pc, #168]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	e047      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b38:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d102      	bne.n	8003b4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b44:	4b26      	ldr	r3, [pc, #152]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e03e      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b4a:	4b23      	ldr	r3, [pc, #140]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d136      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b60:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b74:	4a1a      	ldr	r2, [pc, #104]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7e:	68d2      	ldr	r2, [r2, #12]
 8003b80:	0a12      	lsrs	r2, r2, #8
 8003b82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
      break;
 8003b8c:	e00c      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b8e:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	4a10      	ldr	r2, [pc, #64]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	0a12      	lsrs	r2, r2, #8
 8003b9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]
      break;
 8003ba6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0e5b      	lsrs	r3, r3, #25
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bc8:	693b      	ldr	r3, [r7, #16]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	00f42400 	.word	0x00f42400
 8003be0:	007a1200 	.word	0x007a1200

08003be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000009c 	.word	0x2000009c

08003bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c00:	f7ff fff0 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4904      	ldr	r1, [pc, #16]	@ (8003c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08007034 	.word	0x08007034

08003c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c2c:	f7ff ffda 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0adb      	lsrs	r3, r3, #11
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4904      	ldr	r1, [pc, #16]	@ (8003c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08007034 	.word	0x08007034

08003c54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c64:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d10c      	bne.n	8003c92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c78:	4a17      	ldr	r2, [pc, #92]	@ (8003cd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	0a12      	lsrs	r2, r2, #8
 8003c86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	617b      	str	r3, [r7, #20]
    break;
 8003c90:	e00c      	b.n	8003cac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c92:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	0a12      	lsrs	r2, r2, #8
 8003ca0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
    break;
 8003caa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cac:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0e5b      	lsrs	r3, r3, #25
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cc6:	687b      	ldr	r3, [r7, #4]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	00f42400 	.word	0x00f42400

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce8:	2300      	movs	r3, #0
 8003cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cec:	2300      	movs	r3, #0
 8003cee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8098 	beq.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b43      	ldr	r3, [pc, #268]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	4b40      	ldr	r3, [pc, #256]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	4a3f      	ldr	r2, [pc, #252]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d26:	2301      	movs	r3, #1
 8003d28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a39      	ldr	r2, [pc, #228]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d36:	f7fd ffbb 	bl	8001cb0 <HAL_GetTick>
 8003d3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3c:	e009      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd ffb7 	bl	8001cb0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d902      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d50:	e005      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d52:	4b30      	ldr	r3, [pc, #192]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ef      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d159      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d64:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01e      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d019      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d80:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d8c:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d92:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dac:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd ff77 	bl	8001cb0 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc4:	e00b      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd ff73 	bl	8001cb0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	74fb      	strb	r3, [r7, #19]
            break;
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dde:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ec      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df2:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e08:	e008      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	74bb      	strb	r3, [r7, #18]
 8003e0e:	e005      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1c:	7c7b      	ldrb	r3, [r7, #17]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4ba7      	ldr	r3, [pc, #668]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	4aa6      	ldr	r2, [pc, #664]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e3a:	4ba1      	ldr	r3, [pc, #644]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	499d      	ldr	r1, [pc, #628]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e5c:	4b98      	ldr	r3, [pc, #608]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f023 020c 	bic.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4995      	ldr	r1, [pc, #596]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e7e:	4b90      	ldr	r3, [pc, #576]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	498c      	ldr	r1, [pc, #560]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ea0:	4b87      	ldr	r3, [pc, #540]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	4984      	ldr	r1, [pc, #528]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	497b      	ldr	r1, [pc, #492]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee4:	4b76      	ldr	r3, [pc, #472]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4973      	ldr	r1, [pc, #460]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f06:	4b6e      	ldr	r3, [pc, #440]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	496a      	ldr	r1, [pc, #424]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f28:	4b65      	ldr	r3, [pc, #404]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4962      	ldr	r1, [pc, #392]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	4959      	ldr	r1, [pc, #356]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f6c:	4b54      	ldr	r3, [pc, #336]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	4951      	ldr	r1, [pc, #324]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4948      	ldr	r1, [pc, #288]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb0:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4940      	ldr	r1, [pc, #256]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fce:	d105      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fe8:	4b35      	ldr	r3, [pc, #212]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff6:	4932      	ldr	r1, [pc, #200]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b2d      	ldr	r3, [pc, #180]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a2c      	ldr	r2, [pc, #176]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004020:	4b27      	ldr	r3, [pc, #156]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	4924      	ldr	r1, [pc, #144]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800403e:	d105      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b1f      	ldr	r3, [pc, #124]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004058:	4b19      	ldr	r3, [pc, #100]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4916      	ldr	r1, [pc, #88]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004076:	d105      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a10      	ldr	r2, [pc, #64]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d019      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004090:	4b0b      	ldr	r3, [pc, #44]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4908      	ldr	r1, [pc, #32]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ae:	d109      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4b03      	ldr	r3, [pc, #12]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a02      	ldr	r2, [pc, #8]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040d0:	4b29      	ldr	r3, [pc, #164]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	4926      	ldr	r1, [pc, #152]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040f0:	4b21      	ldr	r3, [pc, #132]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a20      	ldr	r2, [pc, #128]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004108:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004116:	4918      	ldr	r1, [pc, #96]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004128:	4b13      	ldr	r3, [pc, #76]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004132:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004140:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	490a      	ldr	r1, [pc, #40]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800416c:	7cbb      	ldrb	r3, [r7, #18]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000

0800417c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e049      	b.n	8004222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fb7e 	bl	80018a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 fa26 	bl	800460c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d001      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e054      	b.n	80042ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <HAL_TIM_Base_Start_IT+0xd0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426e:	d01d      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_TIM_Base_Start_IT+0xd4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_TIM_Base_Start_IT+0xd8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <HAL_TIM_Base_Start_IT+0xdc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_TIM_Base_Start_IT+0xe0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1c      	ldr	r2, [pc, #112]	@ (8004310 <HAL_TIM_Base_Start_IT+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_TIM_Base_Start_IT+0xe8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d115      	bne.n	80042d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <HAL_TIM_Base_Start_IT+0xec>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d015      	beq.n	80042ea <HAL_TIM_Base_Start_IT+0xbe>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c4:	d011      	beq.n	80042ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d6:	e008      	b.n	80042ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e000      	b.n	80042ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40013400 	.word	0x40013400
 8004310:	40014000 	.word	0x40014000
 8004314:	40015000 	.word	0x40015000
 8004318:	00010007 	.word	0x00010007

0800431c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d020      	beq.n	8004380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0202 	mvn.w	r2, #2
 8004350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f931 	bl	80045ce <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f923 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f934 	bl	80045e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01b      	beq.n	80043cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0204 	mvn.w	r2, #4
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f90b 	bl	80045ce <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f8fd 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f90e 	bl	80045e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0208 	mvn.w	r2, #8
 80043e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8e5 	bl	80045ce <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8d7 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f8e8 	bl	80045e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b00      	cmp	r3, #0
 8004420:	d020      	beq.n	8004464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2208      	movs	r2, #8
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8bf 	bl	80045ce <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8b1 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f8c2 	bl	80045e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0201 	mvn.w	r2, #1
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fcb4 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80044ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f9ff 	bl	80048b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f9f7 	bl	80048c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f87c 	bl	80045f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0220 	mvn.w	r2, #32
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9bf 	bl	80048a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800453e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9cb 	bl	80048dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f9c3 	bl	80048f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00c      	beq.n	800458e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f9bb 	bl	8004904 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00c      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9b3 	bl	8004918 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a4c      	ldr	r2, [pc, #304]	@ (8004750 <TIM_Base_SetConfig+0x144>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d017      	beq.n	8004654 <TIM_Base_SetConfig+0x48>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462a:	d013      	beq.n	8004654 <TIM_Base_SetConfig+0x48>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a49      	ldr	r2, [pc, #292]	@ (8004754 <TIM_Base_SetConfig+0x148>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00f      	beq.n	8004654 <TIM_Base_SetConfig+0x48>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a48      	ldr	r2, [pc, #288]	@ (8004758 <TIM_Base_SetConfig+0x14c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00b      	beq.n	8004654 <TIM_Base_SetConfig+0x48>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a47      	ldr	r2, [pc, #284]	@ (800475c <TIM_Base_SetConfig+0x150>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <TIM_Base_SetConfig+0x48>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a46      	ldr	r2, [pc, #280]	@ (8004760 <TIM_Base_SetConfig+0x154>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x48>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a45      	ldr	r2, [pc, #276]	@ (8004764 <TIM_Base_SetConfig+0x158>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d108      	bne.n	8004666 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a39      	ldr	r2, [pc, #228]	@ (8004750 <TIM_Base_SetConfig+0x144>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d023      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004674:	d01f      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a36      	ldr	r2, [pc, #216]	@ (8004754 <TIM_Base_SetConfig+0x148>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01b      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a35      	ldr	r2, [pc, #212]	@ (8004758 <TIM_Base_SetConfig+0x14c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a34      	ldr	r2, [pc, #208]	@ (800475c <TIM_Base_SetConfig+0x150>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a33      	ldr	r2, [pc, #204]	@ (8004760 <TIM_Base_SetConfig+0x154>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a33      	ldr	r2, [pc, #204]	@ (8004768 <TIM_Base_SetConfig+0x15c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a32      	ldr	r2, [pc, #200]	@ (800476c <TIM_Base_SetConfig+0x160>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a31      	ldr	r2, [pc, #196]	@ (8004770 <TIM_Base_SetConfig+0x164>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0xaa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004764 <TIM_Base_SetConfig+0x158>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a18      	ldr	r2, [pc, #96]	@ (8004750 <TIM_Base_SetConfig+0x144>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <TIM_Base_SetConfig+0x110>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004760 <TIM_Base_SetConfig+0x154>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00f      	beq.n	800471c <TIM_Base_SetConfig+0x110>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004768 <TIM_Base_SetConfig+0x15c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00b      	beq.n	800471c <TIM_Base_SetConfig+0x110>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a19      	ldr	r2, [pc, #100]	@ (800476c <TIM_Base_SetConfig+0x160>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_Base_SetConfig+0x110>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <TIM_Base_SetConfig+0x164>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_Base_SetConfig+0x110>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a13      	ldr	r2, [pc, #76]	@ (8004764 <TIM_Base_SetConfig+0x158>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d103      	bne.n	8004724 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]
  }
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40013400 	.word	0x40013400
 8004764:	40015000 	.word	0x40015000
 8004768:	40014000 	.word	0x40014000
 800476c:	40014400 	.word	0x40014400
 8004770:	40014800 	.word	0x40014800

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e074      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a33      	ldr	r2, [pc, #204]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a31      	ldr	r2, [pc, #196]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d108      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80047e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a21      	ldr	r2, [pc, #132]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480c:	d01d      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1f      	ldr	r2, [pc, #124]	@ (8004890 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1d      	ldr	r2, [pc, #116]	@ (8004894 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1c      	ldr	r2, [pc, #112]	@ (8004898 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a15      	ldr	r2, [pc, #84]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a18      	ldr	r2, [pc, #96]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a11      	ldr	r2, [pc, #68]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40013400 	.word	0x40013400
 800488c:	40015000 	.word	0x40015000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e042      	b.n	80049c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fc ffcd 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2224      	movs	r2, #36	@ 0x24
 800495a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fef6 	bl	8005768 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fbf7 	bl	8005170 <UART_SetConfig>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e01b      	b.n	80049c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800499a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 ff75 	bl	80058ac <UART_CheckIdleState>
 80049c2:	4603      	mov	r3, r0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	@ 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d17b      	bne.n	8004ade <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_UART_Transmit+0x26>
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e074      	b.n	8004ae0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2221      	movs	r2, #33	@ 0x21
 8004a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a06:	f7fd f953 	bl	8001cb0 <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a24:	d108      	bne.n	8004a38 <HAL_UART_Transmit+0x6c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e003      	b.n	8004a40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a40:	e030      	b.n	8004aa4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2180      	movs	r1, #128	@ 0x80
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 ffd7 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e03d      	b.n	8004ae0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	e007      	b.n	8004a92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1c8      	bne.n	8004a42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2140      	movs	r1, #64	@ 0x40
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 ffa0 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e006      	b.n	8004ae0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b0ba      	sub	sp, #232	@ 0xe8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004b16:	4013      	ands	r3, r2
 8004b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11b      	bne.n	8004b5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 82e3 	beq.w	8005118 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
      }
      return;
 8004b5a:	e2dd      	b.n	8005118 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8123 	beq.w	8004dac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8004da0 <HAL_UART_IRQHandler+0x2b8>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b76:	4b8b      	ldr	r3, [pc, #556]	@ (8004da4 <HAL_UART_IRQHandler+0x2bc>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8116 	beq.w	8004dac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d011      	beq.n	8004bb0 <HAL_UART_IRQHandler+0xc8>
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00b      	beq.n	8004bb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba6:	f043 0201 	orr.w	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d011      	beq.n	8004be0 <HAL_UART_IRQHandler+0xf8>
 8004bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd6:	f043 0204 	orr.w	r2, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d011      	beq.n	8004c10 <HAL_UART_IRQHandler+0x128>
 8004bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c06:	f043 0202 	orr.w	r2, r3, #2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d017      	beq.n	8004c4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8004da0 <HAL_UART_IRQHandler+0x2b8>)
 8004c2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00b      	beq.n	8004c4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2208      	movs	r2, #8
 8004c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	f043 0208 	orr.w	r2, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <HAL_UART_IRQHandler+0x196>
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8249 	beq.w	800511c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d013      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d105      	bne.n	8004cae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d054      	beq.n	8004d8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fef9 	bl	8005ada <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	2b40      	cmp	r3, #64	@ 0x40
 8004cf4:	d146      	bne.n	8004d84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1d9      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d017      	beq.n	8004d7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d52:	4a15      	ldr	r2, [pc, #84]	@ (8004da8 <HAL_UART_IRQHandler+0x2c0>)
 8004d54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd f93d 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d019      	beq.n	8004d9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004d76:	4610      	mov	r0, r2
 8004d78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7a:	e00f      	b.n	8004d9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f9e1 	bl	8005144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d82:	e00b      	b.n	8004d9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9dd 	bl	8005144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8a:	e007      	b.n	8004d9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f9d9 	bl	8005144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004d9a:	e1bf      	b.n	800511c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	bf00      	nop
    return;
 8004d9e:	e1bd      	b.n	800511c <HAL_UART_IRQHandler+0x634>
 8004da0:	10000001 	.word	0x10000001
 8004da4:	04000120 	.word	0x04000120
 8004da8:	08005ba7 	.word	0x08005ba7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f040 8153 	bne.w	800505c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 814c 	beq.w	800505c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8145 	beq.w	800505c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	f040 80bb 	bne.w	8004f60 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 818f 	beq.w	8005120 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	f080 8187 	bcs.w	8005120 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 8087 	bne.w	8004f3e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1da      	bne.n	8004e30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ea2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004eb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e1      	bne.n	8004e7a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004eda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004edc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ee0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ee8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e3      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e4      	bne.n	8004efc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fc fff6 	bl	8001f2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8fd 	bl	8005158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f5e:	e0df      	b.n	8005120 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80d1 	beq.w	8005124 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80cc 	beq.w	8005124 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e4      	bne.n	8004f8c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fea:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e1      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0310 	bic.w	r3, r3, #16
 8005026:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	617b      	str	r3, [r7, #20]
   return(result);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e4      	bne.n	8005012 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800504e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f87f 	bl	8005158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800505a:	e063      	b.n	8005124 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00e      	beq.n	8005086 <HAL_UART_IRQHandler+0x59e>
 8005068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800507c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fdd2 	bl	8005c28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005084:	e051      	b.n	800512a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d014      	beq.n	80050bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800509e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03a      	beq.n	8005128 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
    }
    return;
 80050ba:	e035      	b.n	8005128 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_UART_IRQHandler+0x5f4>
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fd7c 	bl	8005bd2 <UART_EndTransmit_IT>
    return;
 80050da:	e026      	b.n	800512a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <HAL_UART_IRQHandler+0x614>
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fdab 	bl	8005c50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fa:	e016      	b.n	800512a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d010      	beq.n	800512a <HAL_UART_IRQHandler+0x642>
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510c:	2b00      	cmp	r3, #0
 800510e:	da0c      	bge.n	800512a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd93 	bl	8005c3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005116:	e008      	b.n	800512a <HAL_UART_IRQHandler+0x642>
      return;
 8005118:	bf00      	nop
 800511a:	e006      	b.n	800512a <HAL_UART_IRQHandler+0x642>
    return;
 800511c:	bf00      	nop
 800511e:	e004      	b.n	800512a <HAL_UART_IRQHandler+0x642>
      return;
 8005120:	bf00      	nop
 8005122:	e002      	b.n	800512a <HAL_UART_IRQHandler+0x642>
      return;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <HAL_UART_IRQHandler+0x642>
    return;
 8005128:	bf00      	nop
  }
}
 800512a:	37e8      	adds	r7, #232	@ 0xe8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b08c      	sub	sp, #48	@ 0x30
 8005176:	af00      	add	r7, sp, #0
 8005178:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	431a      	orrs	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	431a      	orrs	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	4313      	orrs	r3, r2
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4baa      	ldr	r3, [pc, #680]	@ (8005448 <UART_SetConfig+0x2d8>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a9f      	ldr	r2, [pc, #636]	@ (800544c <UART_SetConfig+0x2dc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051d8:	4313      	orrs	r3, r2
 80051da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	f023 010f 	bic.w	r1, r3, #15
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a90      	ldr	r2, [pc, #576]	@ (8005450 <UART_SetConfig+0x2e0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d125      	bne.n	8005260 <UART_SetConfig+0xf0>
 8005214:	4b8f      	ldr	r3, [pc, #572]	@ (8005454 <UART_SetConfig+0x2e4>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b03      	cmp	r3, #3
 8005220:	d81a      	bhi.n	8005258 <UART_SetConfig+0xe8>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0xb8>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005239 	.word	0x08005239
 800522c:	08005249 	.word	0x08005249
 8005230:	08005241 	.word	0x08005241
 8005234:	08005251 	.word	0x08005251
 8005238:	2301      	movs	r3, #1
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e116      	b.n	800546e <UART_SetConfig+0x2fe>
 8005240:	2302      	movs	r3, #2
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e112      	b.n	800546e <UART_SetConfig+0x2fe>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e10e      	b.n	800546e <UART_SetConfig+0x2fe>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e10a      	b.n	800546e <UART_SetConfig+0x2fe>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525e:	e106      	b.n	800546e <UART_SetConfig+0x2fe>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a7c      	ldr	r2, [pc, #496]	@ (8005458 <UART_SetConfig+0x2e8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d138      	bne.n	80052dc <UART_SetConfig+0x16c>
 800526a:	4b7a      	ldr	r3, [pc, #488]	@ (8005454 <UART_SetConfig+0x2e4>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d82d      	bhi.n	80052d4 <UART_SetConfig+0x164>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0x110>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052d5 	.word	0x080052d5
 8005288:	080052d5 	.word	0x080052d5
 800528c:	080052d5 	.word	0x080052d5
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080052d5 	.word	0x080052d5
 8005298:	080052d5 	.word	0x080052d5
 800529c:	080052d5 	.word	0x080052d5
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	080052d5 	.word	0x080052d5
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e0d8      	b.n	800546e <UART_SetConfig+0x2fe>
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e0d4      	b.n	800546e <UART_SetConfig+0x2fe>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e0d0      	b.n	800546e <UART_SetConfig+0x2fe>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e0cc      	b.n	800546e <UART_SetConfig+0x2fe>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e0c8      	b.n	800546e <UART_SetConfig+0x2fe>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a5e      	ldr	r2, [pc, #376]	@ (800545c <UART_SetConfig+0x2ec>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d125      	bne.n	8005332 <UART_SetConfig+0x1c2>
 80052e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005454 <UART_SetConfig+0x2e4>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052f0:	2b30      	cmp	r3, #48	@ 0x30
 80052f2:	d016      	beq.n	8005322 <UART_SetConfig+0x1b2>
 80052f4:	2b30      	cmp	r3, #48	@ 0x30
 80052f6:	d818      	bhi.n	800532a <UART_SetConfig+0x1ba>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d00a      	beq.n	8005312 <UART_SetConfig+0x1a2>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d814      	bhi.n	800532a <UART_SetConfig+0x1ba>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <UART_SetConfig+0x19a>
 8005304:	2b10      	cmp	r3, #16
 8005306:	d008      	beq.n	800531a <UART_SetConfig+0x1aa>
 8005308:	e00f      	b.n	800532a <UART_SetConfig+0x1ba>
 800530a:	2300      	movs	r3, #0
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005310:	e0ad      	b.n	800546e <UART_SetConfig+0x2fe>
 8005312:	2302      	movs	r3, #2
 8005314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005318:	e0a9      	b.n	800546e <UART_SetConfig+0x2fe>
 800531a:	2304      	movs	r3, #4
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005320:	e0a5      	b.n	800546e <UART_SetConfig+0x2fe>
 8005322:	2308      	movs	r3, #8
 8005324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005328:	e0a1      	b.n	800546e <UART_SetConfig+0x2fe>
 800532a:	2310      	movs	r3, #16
 800532c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005330:	e09d      	b.n	800546e <UART_SetConfig+0x2fe>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4a      	ldr	r2, [pc, #296]	@ (8005460 <UART_SetConfig+0x2f0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d125      	bne.n	8005388 <UART_SetConfig+0x218>
 800533c:	4b45      	ldr	r3, [pc, #276]	@ (8005454 <UART_SetConfig+0x2e4>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005342:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005346:	2bc0      	cmp	r3, #192	@ 0xc0
 8005348:	d016      	beq.n	8005378 <UART_SetConfig+0x208>
 800534a:	2bc0      	cmp	r3, #192	@ 0xc0
 800534c:	d818      	bhi.n	8005380 <UART_SetConfig+0x210>
 800534e:	2b80      	cmp	r3, #128	@ 0x80
 8005350:	d00a      	beq.n	8005368 <UART_SetConfig+0x1f8>
 8005352:	2b80      	cmp	r3, #128	@ 0x80
 8005354:	d814      	bhi.n	8005380 <UART_SetConfig+0x210>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <UART_SetConfig+0x1f0>
 800535a:	2b40      	cmp	r3, #64	@ 0x40
 800535c:	d008      	beq.n	8005370 <UART_SetConfig+0x200>
 800535e:	e00f      	b.n	8005380 <UART_SetConfig+0x210>
 8005360:	2300      	movs	r3, #0
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005366:	e082      	b.n	800546e <UART_SetConfig+0x2fe>
 8005368:	2302      	movs	r3, #2
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536e:	e07e      	b.n	800546e <UART_SetConfig+0x2fe>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e07a      	b.n	800546e <UART_SetConfig+0x2fe>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537e:	e076      	b.n	800546e <UART_SetConfig+0x2fe>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005386:	e072      	b.n	800546e <UART_SetConfig+0x2fe>
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <UART_SetConfig+0x2f4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d12a      	bne.n	80053e8 <UART_SetConfig+0x278>
 8005392:	4b30      	ldr	r3, [pc, #192]	@ (8005454 <UART_SetConfig+0x2e4>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a0:	d01a      	beq.n	80053d8 <UART_SetConfig+0x268>
 80053a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a6:	d81b      	bhi.n	80053e0 <UART_SetConfig+0x270>
 80053a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ac:	d00c      	beq.n	80053c8 <UART_SetConfig+0x258>
 80053ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b2:	d815      	bhi.n	80053e0 <UART_SetConfig+0x270>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <UART_SetConfig+0x250>
 80053b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053bc:	d008      	beq.n	80053d0 <UART_SetConfig+0x260>
 80053be:	e00f      	b.n	80053e0 <UART_SetConfig+0x270>
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	e052      	b.n	800546e <UART_SetConfig+0x2fe>
 80053c8:	2302      	movs	r3, #2
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e04e      	b.n	800546e <UART_SetConfig+0x2fe>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e04a      	b.n	800546e <UART_SetConfig+0x2fe>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053de:	e046      	b.n	800546e <UART_SetConfig+0x2fe>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e042      	b.n	800546e <UART_SetConfig+0x2fe>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a17      	ldr	r2, [pc, #92]	@ (800544c <UART_SetConfig+0x2dc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d13a      	bne.n	8005468 <UART_SetConfig+0x2f8>
 80053f2:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <UART_SetConfig+0x2e4>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005400:	d01a      	beq.n	8005438 <UART_SetConfig+0x2c8>
 8005402:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005406:	d81b      	bhi.n	8005440 <UART_SetConfig+0x2d0>
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800540c:	d00c      	beq.n	8005428 <UART_SetConfig+0x2b8>
 800540e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005412:	d815      	bhi.n	8005440 <UART_SetConfig+0x2d0>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <UART_SetConfig+0x2b0>
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541c:	d008      	beq.n	8005430 <UART_SetConfig+0x2c0>
 800541e:	e00f      	b.n	8005440 <UART_SetConfig+0x2d0>
 8005420:	2300      	movs	r3, #0
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005426:	e022      	b.n	800546e <UART_SetConfig+0x2fe>
 8005428:	2302      	movs	r3, #2
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542e:	e01e      	b.n	800546e <UART_SetConfig+0x2fe>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005436:	e01a      	b.n	800546e <UART_SetConfig+0x2fe>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543e:	e016      	b.n	800546e <UART_SetConfig+0x2fe>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005446:	e012      	b.n	800546e <UART_SetConfig+0x2fe>
 8005448:	cfff69f3 	.word	0xcfff69f3
 800544c:	40008000 	.word	0x40008000
 8005450:	40013800 	.word	0x40013800
 8005454:	40021000 	.word	0x40021000
 8005458:	40004400 	.word	0x40004400
 800545c:	40004800 	.word	0x40004800
 8005460:	40004c00 	.word	0x40004c00
 8005464:	40005000 	.word	0x40005000
 8005468:	2310      	movs	r3, #16
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4aae      	ldr	r2, [pc, #696]	@ (800572c <UART_SetConfig+0x5bc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	f040 8097 	bne.w	80055a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800547e:	2b08      	cmp	r3, #8
 8005480:	d823      	bhi.n	80054ca <UART_SetConfig+0x35a>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x318>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054cb 	.word	0x080054cb
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054bb 	.word	0x080054bb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054cb 	.word	0x080054cb
 80054a4:	080054cb 	.word	0x080054cb
 80054a8:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe fba6 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80054b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054b2:	e010      	b.n	80054d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b9e      	ldr	r3, [pc, #632]	@ (8005730 <UART_SetConfig+0x5c0>)
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054b8:	e00d      	b.n	80054d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fe fb31 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80054be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054c0:	e009      	b.n	80054d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054c8:	e005      	b.n	80054d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8130 	beq.w	800573e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	4a94      	ldr	r2, [pc, #592]	@ (8005734 <UART_SetConfig+0x5c4>)
 80054e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d305      	bcc.n	800550e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	429a      	cmp	r2, r3
 800550c:	d903      	bls.n	8005516 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005514:	e113      	b.n	800573e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	2200      	movs	r2, #0
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	60fa      	str	r2, [r7, #12]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	4a84      	ldr	r2, [pc, #528]	@ (8005734 <UART_SetConfig+0x5c4>)
 8005524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005528:	b29b      	uxth	r3, r3
 800552a:	2200      	movs	r2, #0
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005538:	f7fb fae0 	bl	8000afc <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	020b      	lsls	r3, r1, #8
 800554e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005552:	0202      	lsls	r2, r0, #8
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	6849      	ldr	r1, [r1, #4]
 8005558:	0849      	lsrs	r1, r1, #1
 800555a:	2000      	movs	r0, #0
 800555c:	460c      	mov	r4, r1
 800555e:	4605      	mov	r5, r0
 8005560:	eb12 0804 	adds.w	r8, r2, r4
 8005564:	eb43 0905 	adc.w	r9, r3, r5
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	469a      	mov	sl, r3
 8005570:	4693      	mov	fp, r2
 8005572:	4652      	mov	r2, sl
 8005574:	465b      	mov	r3, fp
 8005576:	4640      	mov	r0, r8
 8005578:	4649      	mov	r1, r9
 800557a:	f7fb fabf 	bl	8000afc <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4613      	mov	r3, r2
 8005584:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800558c:	d308      	bcc.n	80055a0 <UART_SetConfig+0x430>
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005594:	d204      	bcs.n	80055a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	e0ce      	b.n	800573e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055a6:	e0ca      	b.n	800573e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b0:	d166      	bne.n	8005680 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d827      	bhi.n	800560a <UART_SetConfig+0x49a>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <UART_SetConfig+0x450>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	0800560b 	.word	0x0800560b
 80055d0:	080055fb 	.word	0x080055fb
 80055d4:	0800560b 	.word	0x0800560b
 80055d8:	0800560b 	.word	0x0800560b
 80055dc:	0800560b 	.word	0x0800560b
 80055e0:	08005603 	.word	0x08005603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e4:	f7fe fb0a 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80055e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ea:	e014      	b.n	8005616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ec:	f7fe fb1c 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 80055f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055f2:	e010      	b.n	8005616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005730 <UART_SetConfig+0x5c0>)
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055f8:	e00d      	b.n	8005616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fa:	f7fe fa91 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80055fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005600:	e009      	b.n	8005616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005608:	e005      	b.n	8005616 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8090 	beq.w	800573e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	4a44      	ldr	r2, [pc, #272]	@ (8005734 <UART_SetConfig+0x5c4>)
 8005624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005628:	461a      	mov	r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005630:	005a      	lsls	r2, r3, #1
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	441a      	add	r2, r3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b0f      	cmp	r3, #15
 8005648:	d916      	bls.n	8005678 <UART_SetConfig+0x508>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005650:	d212      	bcs.n	8005678 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f023 030f 	bic.w	r3, r3, #15
 800565a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	b29a      	uxth	r2, r3
 8005668:	8bfb      	ldrh	r3, [r7, #30]
 800566a:	4313      	orrs	r3, r2
 800566c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	8bfa      	ldrh	r2, [r7, #30]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	e062      	b.n	800573e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800567e:	e05e      	b.n	800573e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005680:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005684:	2b08      	cmp	r3, #8
 8005686:	d828      	bhi.n	80056da <UART_SetConfig+0x56a>
 8005688:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <UART_SetConfig+0x520>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056db 	.word	0x080056db
 80056a0:	080056cb 	.word	0x080056cb
 80056a4:	080056db 	.word	0x080056db
 80056a8:	080056db 	.word	0x080056db
 80056ac:	080056db 	.word	0x080056db
 80056b0:	080056d3 	.word	0x080056d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7fe faa2 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ba:	e014      	b.n	80056e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056bc:	f7fe fab4 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 80056c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056c2:	e010      	b.n	80056e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005730 <UART_SetConfig+0x5c0>)
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056c8:	e00d      	b.n	80056e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ca:	f7fe fa29 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80056ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056d0:	e009      	b.n	80056e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056d8:	e005      	b.n	80056e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056e4:	bf00      	nop
    }

    if (pclk != 0U)
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d028      	beq.n	800573e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	4a10      	ldr	r2, [pc, #64]	@ (8005734 <UART_SetConfig+0x5c4>)
 80056f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	441a      	add	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	d910      	bls.n	8005738 <UART_SetConfig+0x5c8>
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571c:	d20c      	bcs.n	8005738 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	b29a      	uxth	r2, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	e009      	b.n	800573e <UART_SetConfig+0x5ce>
 800572a:	bf00      	nop
 800572c:	40008000 	.word	0x40008000
 8005730:	00f42400 	.word	0x00f42400
 8005734:	0800704c 	.word	0x0800704c
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2201      	movs	r2, #1
 8005742:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2201      	movs	r2, #1
 800574a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2200      	movs	r2, #0
 8005758:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800575a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800575e:	4618      	mov	r0, r3
 8005760:	3730      	adds	r7, #48	@ 0x30
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01a      	beq.n	800587e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005866:	d10a      	bne.n	800587e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b098      	sub	sp, #96	@ 0x60
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058bc:	f7fc f9f8 	bl	8001cb0 <HAL_GetTick>
 80058c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d12f      	bne.n	8005930 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f88e 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d022      	beq.n	8005930 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005908:	647b      	str	r3, [r7, #68]	@ 0x44
 800590a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800590e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e6      	bne.n	80058ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e063      	b.n	80059f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d149      	bne.n	80059d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005946:	2200      	movs	r2, #0
 8005948:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f857 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d03c      	beq.n	80059d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	623b      	str	r3, [r7, #32]
   return(result);
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800596c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005976:	633b      	str	r3, [r7, #48]	@ 0x30
 8005978:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800597c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	60fb      	str	r3, [r7, #12]
   return(result);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059aa:	61fa      	str	r2, [r7, #28]
 80059ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	69b9      	ldr	r1, [r7, #24]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	617b      	str	r3, [r7, #20]
   return(result);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e012      	b.n	80059f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3758      	adds	r7, #88	@ 0x58
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a10:	e04f      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d04b      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fc f949 	bl	8001cb0 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e04e      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d037      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d034      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d031      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d110      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2208      	movs	r2, #8
 8005a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f838 	bl	8005ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e029      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a8c:	d111      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f81e 	bl	8005ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e00f      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4013      	ands	r3, r2
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d0a0      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b095      	sub	sp, #84	@ 0x54
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e3      	bne.n	8005b14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d118      	bne.n	8005b86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0310 	bic.w	r3, r3, #16
 8005b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b9a:	bf00      	nop
 8005b9c:	3754      	adds	r7, #84	@ 0x54
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fabd 	bl	8005144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b088      	sub	sp, #32
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	613b      	str	r3, [r7, #16]
   return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e6      	bne.n	8005bda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fa88 	bl	8005130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c20:	bf00      	nop
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UARTEx_DisableFifoMode+0x16>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e027      	b.n	8005cca <HAL_UARTEx_DisableFifoMode+0x66>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	@ 0x24
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e02d      	b.n	8005d4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2224      	movs	r2, #36	@ 0x24
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f850 	bl	8005dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e02d      	b.n	8005dc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	@ 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f812 	bl	8005dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d108      	bne.n	8005df2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df0:	e031      	b.n	8005e56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005df2:	2308      	movs	r3, #8
 8005df4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005df6:	2308      	movs	r3, #8
 8005df8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	0e5b      	lsrs	r3, r3, #25
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	0f5b      	lsrs	r3, r3, #29
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	7b3a      	ldrb	r2, [r7, #12]
 8005e1e:	4911      	ldr	r1, [pc, #68]	@ (8005e64 <UARTEx_SetNbDataToProcess+0x94>)
 8005e20:	5c8a      	ldrb	r2, [r1, r2]
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e26:	7b3a      	ldrb	r2, [r7, #12]
 8005e28:	490f      	ldr	r1, [pc, #60]	@ (8005e68 <UARTEx_SetNbDataToProcess+0x98>)
 8005e2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	7b7a      	ldrb	r2, [r7, #13]
 8005e3c:	4909      	ldr	r1, [pc, #36]	@ (8005e64 <UARTEx_SetNbDataToProcess+0x94>)
 8005e3e:	5c8a      	ldrb	r2, [r1, r2]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e44:	7b7a      	ldrb	r2, [r7, #13]
 8005e46:	4908      	ldr	r1, [pc, #32]	@ (8005e68 <UARTEx_SetNbDataToProcess+0x98>)
 8005e48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	08007064 	.word	0x08007064
 8005e68:	0800706c 	.word	0x0800706c

08005e6c <std>:
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	e9c0 3300 	strd	r3, r3, [r0]
 8005e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e7a:	6083      	str	r3, [r0, #8]
 8005e7c:	8181      	strh	r1, [r0, #12]
 8005e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e80:	81c2      	strh	r2, [r0, #14]
 8005e82:	6183      	str	r3, [r0, #24]
 8005e84:	4619      	mov	r1, r3
 8005e86:	2208      	movs	r2, #8
 8005e88:	305c      	adds	r0, #92	@ 0x5c
 8005e8a:	f000 fab5 	bl	80063f8 <memset>
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <std+0x58>)
 8005e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec8 <std+0x5c>)
 8005e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ecc <std+0x60>)
 8005e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <std+0x64>)
 8005e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <std+0x68>)
 8005ea0:	6224      	str	r4, [r4, #32]
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d006      	beq.n	8005eb4 <std+0x48>
 8005ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005eaa:	4294      	cmp	r4, r2
 8005eac:	d002      	beq.n	8005eb4 <std+0x48>
 8005eae:	33d0      	adds	r3, #208	@ 0xd0
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d105      	bne.n	8005ec0 <std+0x54>
 8005eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ebc:	f000 bb14 	b.w	80064e8 <__retarget_lock_init_recursive>
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08006249 	.word	0x08006249
 8005ec8:	0800626b 	.word	0x0800626b
 8005ecc:	080062a3 	.word	0x080062a3
 8005ed0:	080062c7 	.word	0x080062c7
 8005ed4:	200002dc 	.word	0x200002dc

08005ed8 <stdio_exit_handler>:
 8005ed8:	4a02      	ldr	r2, [pc, #8]	@ (8005ee4 <stdio_exit_handler+0xc>)
 8005eda:	4903      	ldr	r1, [pc, #12]	@ (8005ee8 <stdio_exit_handler+0x10>)
 8005edc:	4803      	ldr	r0, [pc, #12]	@ (8005eec <stdio_exit_handler+0x14>)
 8005ede:	f000 b869 	b.w	8005fb4 <_fwalk_sglue>
 8005ee2:	bf00      	nop
 8005ee4:	200000a8 	.word	0x200000a8
 8005ee8:	08006d99 	.word	0x08006d99
 8005eec:	200000b8 	.word	0x200000b8

08005ef0 <cleanup_stdio>:
 8005ef0:	6841      	ldr	r1, [r0, #4]
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <cleanup_stdio+0x34>)
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	4604      	mov	r4, r0
 8005efa:	d001      	beq.n	8005f00 <cleanup_stdio+0x10>
 8005efc:	f000 ff4c 	bl	8006d98 <_fflush_r>
 8005f00:	68a1      	ldr	r1, [r4, #8]
 8005f02:	4b09      	ldr	r3, [pc, #36]	@ (8005f28 <cleanup_stdio+0x38>)
 8005f04:	4299      	cmp	r1, r3
 8005f06:	d002      	beq.n	8005f0e <cleanup_stdio+0x1e>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 ff45 	bl	8006d98 <_fflush_r>
 8005f0e:	68e1      	ldr	r1, [r4, #12]
 8005f10:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <cleanup_stdio+0x3c>)
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d004      	beq.n	8005f20 <cleanup_stdio+0x30>
 8005f16:	4620      	mov	r0, r4
 8005f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f1c:	f000 bf3c 	b.w	8006d98 <_fflush_r>
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	200002dc 	.word	0x200002dc
 8005f28:	20000344 	.word	0x20000344
 8005f2c:	200003ac 	.word	0x200003ac

08005f30 <global_stdio_init.part.0>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	4b0b      	ldr	r3, [pc, #44]	@ (8005f60 <global_stdio_init.part.0+0x30>)
 8005f34:	4c0b      	ldr	r4, [pc, #44]	@ (8005f64 <global_stdio_init.part.0+0x34>)
 8005f36:	4a0c      	ldr	r2, [pc, #48]	@ (8005f68 <global_stdio_init.part.0+0x38>)
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2104      	movs	r1, #4
 8005f40:	f7ff ff94 	bl	8005e6c <std>
 8005f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f48:	2201      	movs	r2, #1
 8005f4a:	2109      	movs	r1, #9
 8005f4c:	f7ff ff8e 	bl	8005e6c <std>
 8005f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f54:	2202      	movs	r2, #2
 8005f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f5a:	2112      	movs	r1, #18
 8005f5c:	f7ff bf86 	b.w	8005e6c <std>
 8005f60:	20000414 	.word	0x20000414
 8005f64:	200002dc 	.word	0x200002dc
 8005f68:	08005ed9 	.word	0x08005ed9

08005f6c <__sfp_lock_acquire>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	@ (8005f74 <__sfp_lock_acquire+0x8>)
 8005f6e:	f000 babc 	b.w	80064ea <__retarget_lock_acquire_recursive>
 8005f72:	bf00      	nop
 8005f74:	2000041d 	.word	0x2000041d

08005f78 <__sfp_lock_release>:
 8005f78:	4801      	ldr	r0, [pc, #4]	@ (8005f80 <__sfp_lock_release+0x8>)
 8005f7a:	f000 bab7 	b.w	80064ec <__retarget_lock_release_recursive>
 8005f7e:	bf00      	nop
 8005f80:	2000041d 	.word	0x2000041d

08005f84 <__sinit>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4604      	mov	r4, r0
 8005f88:	f7ff fff0 	bl	8005f6c <__sfp_lock_acquire>
 8005f8c:	6a23      	ldr	r3, [r4, #32]
 8005f8e:	b11b      	cbz	r3, 8005f98 <__sinit+0x14>
 8005f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f94:	f7ff bff0 	b.w	8005f78 <__sfp_lock_release>
 8005f98:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <__sinit+0x28>)
 8005f9a:	6223      	str	r3, [r4, #32]
 8005f9c:	4b04      	ldr	r3, [pc, #16]	@ (8005fb0 <__sinit+0x2c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f5      	bne.n	8005f90 <__sinit+0xc>
 8005fa4:	f7ff ffc4 	bl	8005f30 <global_stdio_init.part.0>
 8005fa8:	e7f2      	b.n	8005f90 <__sinit+0xc>
 8005faa:	bf00      	nop
 8005fac:	08005ef1 	.word	0x08005ef1
 8005fb0:	20000414 	.word	0x20000414

08005fb4 <_fwalk_sglue>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	4607      	mov	r7, r0
 8005fba:	4688      	mov	r8, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8005fc8:	d505      	bpl.n	8005fd6 <_fwalk_sglue+0x22>
 8005fca:	6824      	ldr	r4, [r4, #0]
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d1f7      	bne.n	8005fc0 <_fwalk_sglue+0xc>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	89ab      	ldrh	r3, [r5, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d907      	bls.n	8005fec <_fwalk_sglue+0x38>
 8005fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	d003      	beq.n	8005fec <_fwalk_sglue+0x38>
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	47c0      	blx	r8
 8005fea:	4306      	orrs	r6, r0
 8005fec:	3568      	adds	r5, #104	@ 0x68
 8005fee:	e7e9      	b.n	8005fc4 <_fwalk_sglue+0x10>

08005ff0 <iprintf>:
 8005ff0:	b40f      	push	{r0, r1, r2, r3}
 8005ff2:	b507      	push	{r0, r1, r2, lr}
 8005ff4:	4906      	ldr	r1, [pc, #24]	@ (8006010 <iprintf+0x20>)
 8005ff6:	ab04      	add	r3, sp, #16
 8005ff8:	6808      	ldr	r0, [r1, #0]
 8005ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ffe:	6881      	ldr	r1, [r0, #8]
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	f000 fb9f 	bl	8006744 <_vfiprintf_r>
 8006006:	b003      	add	sp, #12
 8006008:	f85d eb04 	ldr.w	lr, [sp], #4
 800600c:	b004      	add	sp, #16
 800600e:	4770      	bx	lr
 8006010:	200000b4 	.word	0x200000b4

08006014 <_puts_r>:
 8006014:	6a03      	ldr	r3, [r0, #32]
 8006016:	b570      	push	{r4, r5, r6, lr}
 8006018:	6884      	ldr	r4, [r0, #8]
 800601a:	4605      	mov	r5, r0
 800601c:	460e      	mov	r6, r1
 800601e:	b90b      	cbnz	r3, 8006024 <_puts_r+0x10>
 8006020:	f7ff ffb0 	bl	8005f84 <__sinit>
 8006024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006026:	07db      	lsls	r3, r3, #31
 8006028:	d405      	bmi.n	8006036 <_puts_r+0x22>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	0598      	lsls	r0, r3, #22
 800602e:	d402      	bmi.n	8006036 <_puts_r+0x22>
 8006030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006032:	f000 fa5a 	bl	80064ea <__retarget_lock_acquire_recursive>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	0719      	lsls	r1, r3, #28
 800603a:	d502      	bpl.n	8006042 <_puts_r+0x2e>
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d135      	bne.n	80060ae <_puts_r+0x9a>
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	f000 f981 	bl	800634c <__swsetup_r>
 800604a:	b380      	cbz	r0, 80060ae <_puts_r+0x9a>
 800604c:	f04f 35ff 	mov.w	r5, #4294967295
 8006050:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006052:	07da      	lsls	r2, r3, #31
 8006054:	d405      	bmi.n	8006062 <_puts_r+0x4e>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	059b      	lsls	r3, r3, #22
 800605a:	d402      	bmi.n	8006062 <_puts_r+0x4e>
 800605c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800605e:	f000 fa45 	bl	80064ec <__retarget_lock_release_recursive>
 8006062:	4628      	mov	r0, r5
 8006064:	bd70      	pop	{r4, r5, r6, pc}
 8006066:	2b00      	cmp	r3, #0
 8006068:	da04      	bge.n	8006074 <_puts_r+0x60>
 800606a:	69a2      	ldr	r2, [r4, #24]
 800606c:	429a      	cmp	r2, r3
 800606e:	dc17      	bgt.n	80060a0 <_puts_r+0x8c>
 8006070:	290a      	cmp	r1, #10
 8006072:	d015      	beq.n	80060a0 <_puts_r+0x8c>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	6022      	str	r2, [r4, #0]
 800607a:	7019      	strb	r1, [r3, #0]
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006082:	3b01      	subs	r3, #1
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	2900      	cmp	r1, #0
 8006088:	d1ed      	bne.n	8006066 <_puts_r+0x52>
 800608a:	2b00      	cmp	r3, #0
 800608c:	da11      	bge.n	80060b2 <_puts_r+0x9e>
 800608e:	4622      	mov	r2, r4
 8006090:	210a      	movs	r1, #10
 8006092:	4628      	mov	r0, r5
 8006094:	f000 f91b 	bl	80062ce <__swbuf_r>
 8006098:	3001      	adds	r0, #1
 800609a:	d0d7      	beq.n	800604c <_puts_r+0x38>
 800609c:	250a      	movs	r5, #10
 800609e:	e7d7      	b.n	8006050 <_puts_r+0x3c>
 80060a0:	4622      	mov	r2, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	f000 f913 	bl	80062ce <__swbuf_r>
 80060a8:	3001      	adds	r0, #1
 80060aa:	d1e7      	bne.n	800607c <_puts_r+0x68>
 80060ac:	e7ce      	b.n	800604c <_puts_r+0x38>
 80060ae:	3e01      	subs	r6, #1
 80060b0:	e7e4      	b.n	800607c <_puts_r+0x68>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	220a      	movs	r2, #10
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e7ee      	b.n	800609c <_puts_r+0x88>
	...

080060c0 <puts>:
 80060c0:	4b02      	ldr	r3, [pc, #8]	@ (80060cc <puts+0xc>)
 80060c2:	4601      	mov	r1, r0
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	f7ff bfa5 	b.w	8006014 <_puts_r>
 80060ca:	bf00      	nop
 80060cc:	200000b4 	.word	0x200000b4

080060d0 <setbuf>:
 80060d0:	fab1 f281 	clz	r2, r1
 80060d4:	0952      	lsrs	r2, r2, #5
 80060d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060da:	0052      	lsls	r2, r2, #1
 80060dc:	f000 b800 	b.w	80060e0 <setvbuf>

080060e0 <setvbuf>:
 80060e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060e4:	461d      	mov	r5, r3
 80060e6:	4b57      	ldr	r3, [pc, #348]	@ (8006244 <setvbuf+0x164>)
 80060e8:	681f      	ldr	r7, [r3, #0]
 80060ea:	4604      	mov	r4, r0
 80060ec:	460e      	mov	r6, r1
 80060ee:	4690      	mov	r8, r2
 80060f0:	b127      	cbz	r7, 80060fc <setvbuf+0x1c>
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	b913      	cbnz	r3, 80060fc <setvbuf+0x1c>
 80060f6:	4638      	mov	r0, r7
 80060f8:	f7ff ff44 	bl	8005f84 <__sinit>
 80060fc:	f1b8 0f02 	cmp.w	r8, #2
 8006100:	d006      	beq.n	8006110 <setvbuf+0x30>
 8006102:	f1b8 0f01 	cmp.w	r8, #1
 8006106:	f200 809a 	bhi.w	800623e <setvbuf+0x15e>
 800610a:	2d00      	cmp	r5, #0
 800610c:	f2c0 8097 	blt.w	800623e <setvbuf+0x15e>
 8006110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006112:	07d9      	lsls	r1, r3, #31
 8006114:	d405      	bmi.n	8006122 <setvbuf+0x42>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	059a      	lsls	r2, r3, #22
 800611a:	d402      	bmi.n	8006122 <setvbuf+0x42>
 800611c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800611e:	f000 f9e4 	bl	80064ea <__retarget_lock_acquire_recursive>
 8006122:	4621      	mov	r1, r4
 8006124:	4638      	mov	r0, r7
 8006126:	f000 fe37 	bl	8006d98 <_fflush_r>
 800612a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800612c:	b141      	cbz	r1, 8006140 <setvbuf+0x60>
 800612e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006132:	4299      	cmp	r1, r3
 8006134:	d002      	beq.n	800613c <setvbuf+0x5c>
 8006136:	4638      	mov	r0, r7
 8006138:	f000 f9da 	bl	80064f0 <_free_r>
 800613c:	2300      	movs	r3, #0
 800613e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006140:	2300      	movs	r3, #0
 8006142:	61a3      	str	r3, [r4, #24]
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	061b      	lsls	r3, r3, #24
 800614a:	d503      	bpl.n	8006154 <setvbuf+0x74>
 800614c:	6921      	ldr	r1, [r4, #16]
 800614e:	4638      	mov	r0, r7
 8006150:	f000 f9ce 	bl	80064f0 <_free_r>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	f1b8 0f02 	cmp.w	r8, #2
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	d061      	beq.n	800622a <setvbuf+0x14a>
 8006166:	ab01      	add	r3, sp, #4
 8006168:	466a      	mov	r2, sp
 800616a:	4621      	mov	r1, r4
 800616c:	4638      	mov	r0, r7
 800616e:	f000 fe3b 	bl	8006de8 <__swhatbuf_r>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	4318      	orrs	r0, r3
 8006176:	81a0      	strh	r0, [r4, #12]
 8006178:	bb2d      	cbnz	r5, 80061c6 <setvbuf+0xe6>
 800617a:	9d00      	ldr	r5, [sp, #0]
 800617c:	4628      	mov	r0, r5
 800617e:	f000 fa01 	bl	8006584 <malloc>
 8006182:	4606      	mov	r6, r0
 8006184:	2800      	cmp	r0, #0
 8006186:	d152      	bne.n	800622e <setvbuf+0x14e>
 8006188:	f8dd 9000 	ldr.w	r9, [sp]
 800618c:	45a9      	cmp	r9, r5
 800618e:	d140      	bne.n	8006212 <setvbuf+0x132>
 8006190:	f04f 35ff 	mov.w	r5, #4294967295
 8006194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006198:	f043 0202 	orr.w	r2, r3, #2
 800619c:	81a2      	strh	r2, [r4, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	60a2      	str	r2, [r4, #8]
 80061a2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80061a6:	6022      	str	r2, [r4, #0]
 80061a8:	6122      	str	r2, [r4, #16]
 80061aa:	2201      	movs	r2, #1
 80061ac:	6162      	str	r2, [r4, #20]
 80061ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061b0:	07d6      	lsls	r6, r2, #31
 80061b2:	d404      	bmi.n	80061be <setvbuf+0xde>
 80061b4:	0598      	lsls	r0, r3, #22
 80061b6:	d402      	bmi.n	80061be <setvbuf+0xde>
 80061b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ba:	f000 f997 	bl	80064ec <__retarget_lock_release_recursive>
 80061be:	4628      	mov	r0, r5
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d0d8      	beq.n	800617c <setvbuf+0x9c>
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	b913      	cbnz	r3, 80061d4 <setvbuf+0xf4>
 80061ce:	4638      	mov	r0, r7
 80061d0:	f7ff fed8 	bl	8005f84 <__sinit>
 80061d4:	f1b8 0f01 	cmp.w	r8, #1
 80061d8:	bf08      	it	eq
 80061da:	89a3      	ldrheq	r3, [r4, #12]
 80061dc:	6026      	str	r6, [r4, #0]
 80061de:	bf04      	itt	eq
 80061e0:	f043 0301 	orreq.w	r3, r3, #1
 80061e4:	81a3      	strheq	r3, [r4, #12]
 80061e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ea:	f013 0208 	ands.w	r2, r3, #8
 80061ee:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80061f2:	d01e      	beq.n	8006232 <setvbuf+0x152>
 80061f4:	07d9      	lsls	r1, r3, #31
 80061f6:	bf41      	itttt	mi
 80061f8:	2200      	movmi	r2, #0
 80061fa:	426d      	negmi	r5, r5
 80061fc:	60a2      	strmi	r2, [r4, #8]
 80061fe:	61a5      	strmi	r5, [r4, #24]
 8006200:	bf58      	it	pl
 8006202:	60a5      	strpl	r5, [r4, #8]
 8006204:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006206:	07d2      	lsls	r2, r2, #31
 8006208:	d401      	bmi.n	800620e <setvbuf+0x12e>
 800620a:	059b      	lsls	r3, r3, #22
 800620c:	d513      	bpl.n	8006236 <setvbuf+0x156>
 800620e:	2500      	movs	r5, #0
 8006210:	e7d5      	b.n	80061be <setvbuf+0xde>
 8006212:	4648      	mov	r0, r9
 8006214:	f000 f9b6 	bl	8006584 <malloc>
 8006218:	4606      	mov	r6, r0
 800621a:	2800      	cmp	r0, #0
 800621c:	d0b8      	beq.n	8006190 <setvbuf+0xb0>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	464d      	mov	r5, r9
 8006228:	e7cf      	b.n	80061ca <setvbuf+0xea>
 800622a:	2500      	movs	r5, #0
 800622c:	e7b2      	b.n	8006194 <setvbuf+0xb4>
 800622e:	46a9      	mov	r9, r5
 8006230:	e7f5      	b.n	800621e <setvbuf+0x13e>
 8006232:	60a2      	str	r2, [r4, #8]
 8006234:	e7e6      	b.n	8006204 <setvbuf+0x124>
 8006236:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006238:	f000 f958 	bl	80064ec <__retarget_lock_release_recursive>
 800623c:	e7e7      	b.n	800620e <setvbuf+0x12e>
 800623e:	f04f 35ff 	mov.w	r5, #4294967295
 8006242:	e7bc      	b.n	80061be <setvbuf+0xde>
 8006244:	200000b4 	.word	0x200000b4

08006248 <__sread>:
 8006248:	b510      	push	{r4, lr}
 800624a:	460c      	mov	r4, r1
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	f000 f8fc 	bl	800644c <_read_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	bfab      	itete	ge
 8006258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800625a:	89a3      	ldrhlt	r3, [r4, #12]
 800625c:	181b      	addge	r3, r3, r0
 800625e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006262:	bfac      	ite	ge
 8006264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006266:	81a3      	strhlt	r3, [r4, #12]
 8006268:	bd10      	pop	{r4, pc}

0800626a <__swrite>:
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	461f      	mov	r7, r3
 8006270:	898b      	ldrh	r3, [r1, #12]
 8006272:	05db      	lsls	r3, r3, #23
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	4616      	mov	r6, r2
 800627a:	d505      	bpl.n	8006288 <__swrite+0x1e>
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	2302      	movs	r3, #2
 8006282:	2200      	movs	r2, #0
 8006284:	f000 f8d0 	bl	8006428 <_lseek_r>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800628e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	4632      	mov	r2, r6
 8006296:	463b      	mov	r3, r7
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	f000 b8e7 	b.w	8006470 <_write_r>

080062a2 <__sseek>:
 80062a2:	b510      	push	{r4, lr}
 80062a4:	460c      	mov	r4, r1
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f000 f8bd 	bl	8006428 <_lseek_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	bf15      	itete	ne
 80062b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062be:	81a3      	strheq	r3, [r4, #12]
 80062c0:	bf18      	it	ne
 80062c2:	81a3      	strhne	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__sclose>:
 80062c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ca:	f000 b89d 	b.w	8006408 <_close_r>

080062ce <__swbuf_r>:
 80062ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d0:	460e      	mov	r6, r1
 80062d2:	4614      	mov	r4, r2
 80062d4:	4605      	mov	r5, r0
 80062d6:	b118      	cbz	r0, 80062e0 <__swbuf_r+0x12>
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b90b      	cbnz	r3, 80062e0 <__swbuf_r+0x12>
 80062dc:	f7ff fe52 	bl	8005f84 <__sinit>
 80062e0:	69a3      	ldr	r3, [r4, #24]
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	071a      	lsls	r2, r3, #28
 80062e8:	d501      	bpl.n	80062ee <__swbuf_r+0x20>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	b943      	cbnz	r3, 8006300 <__swbuf_r+0x32>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f82b 	bl	800634c <__swsetup_r>
 80062f6:	b118      	cbz	r0, 8006300 <__swbuf_r+0x32>
 80062f8:	f04f 37ff 	mov.w	r7, #4294967295
 80062fc:	4638      	mov	r0, r7
 80062fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	6922      	ldr	r2, [r4, #16]
 8006304:	1a98      	subs	r0, r3, r2
 8006306:	6963      	ldr	r3, [r4, #20]
 8006308:	b2f6      	uxtb	r6, r6
 800630a:	4283      	cmp	r3, r0
 800630c:	4637      	mov	r7, r6
 800630e:	dc05      	bgt.n	800631c <__swbuf_r+0x4e>
 8006310:	4621      	mov	r1, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 fd40 	bl	8006d98 <_fflush_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	d1ed      	bne.n	80062f8 <__swbuf_r+0x2a>
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	3b01      	subs	r3, #1
 8006320:	60a3      	str	r3, [r4, #8]
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	701e      	strb	r6, [r3, #0]
 800632a:	6962      	ldr	r2, [r4, #20]
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	429a      	cmp	r2, r3
 8006330:	d004      	beq.n	800633c <__swbuf_r+0x6e>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	07db      	lsls	r3, r3, #31
 8006336:	d5e1      	bpl.n	80062fc <__swbuf_r+0x2e>
 8006338:	2e0a      	cmp	r6, #10
 800633a:	d1df      	bne.n	80062fc <__swbuf_r+0x2e>
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f000 fd2a 	bl	8006d98 <_fflush_r>
 8006344:	2800      	cmp	r0, #0
 8006346:	d0d9      	beq.n	80062fc <__swbuf_r+0x2e>
 8006348:	e7d6      	b.n	80062f8 <__swbuf_r+0x2a>
	...

0800634c <__swsetup_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4b29      	ldr	r3, [pc, #164]	@ (80063f4 <__swsetup_r+0xa8>)
 8006350:	4605      	mov	r5, r0
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	460c      	mov	r4, r1
 8006356:	b118      	cbz	r0, 8006360 <__swsetup_r+0x14>
 8006358:	6a03      	ldr	r3, [r0, #32]
 800635a:	b90b      	cbnz	r3, 8006360 <__swsetup_r+0x14>
 800635c:	f7ff fe12 	bl	8005f84 <__sinit>
 8006360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006364:	0719      	lsls	r1, r3, #28
 8006366:	d422      	bmi.n	80063ae <__swsetup_r+0x62>
 8006368:	06da      	lsls	r2, r3, #27
 800636a:	d407      	bmi.n	800637c <__swsetup_r+0x30>
 800636c:	2209      	movs	r2, #9
 800636e:	602a      	str	r2, [r5, #0]
 8006370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	f04f 30ff 	mov.w	r0, #4294967295
 800637a:	e033      	b.n	80063e4 <__swsetup_r+0x98>
 800637c:	0758      	lsls	r0, r3, #29
 800637e:	d512      	bpl.n	80063a6 <__swsetup_r+0x5a>
 8006380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006382:	b141      	cbz	r1, 8006396 <__swsetup_r+0x4a>
 8006384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006388:	4299      	cmp	r1, r3
 800638a:	d002      	beq.n	8006392 <__swsetup_r+0x46>
 800638c:	4628      	mov	r0, r5
 800638e:	f000 f8af 	bl	80064f0 <_free_r>
 8006392:	2300      	movs	r3, #0
 8006394:	6363      	str	r3, [r4, #52]	@ 0x34
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	2300      	movs	r3, #0
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f043 0308 	orr.w	r3, r3, #8
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	b94b      	cbnz	r3, 80063c6 <__swsetup_r+0x7a>
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063bc:	d003      	beq.n	80063c6 <__swsetup_r+0x7a>
 80063be:	4621      	mov	r1, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 fd37 	bl	8006e34 <__smakebuf_r>
 80063c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ca:	f013 0201 	ands.w	r2, r3, #1
 80063ce:	d00a      	beq.n	80063e6 <__swsetup_r+0x9a>
 80063d0:	2200      	movs	r2, #0
 80063d2:	60a2      	str	r2, [r4, #8]
 80063d4:	6962      	ldr	r2, [r4, #20]
 80063d6:	4252      	negs	r2, r2
 80063d8:	61a2      	str	r2, [r4, #24]
 80063da:	6922      	ldr	r2, [r4, #16]
 80063dc:	b942      	cbnz	r2, 80063f0 <__swsetup_r+0xa4>
 80063de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063e2:	d1c5      	bne.n	8006370 <__swsetup_r+0x24>
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	0799      	lsls	r1, r3, #30
 80063e8:	bf58      	it	pl
 80063ea:	6962      	ldrpl	r2, [r4, #20]
 80063ec:	60a2      	str	r2, [r4, #8]
 80063ee:	e7f4      	b.n	80063da <__swsetup_r+0x8e>
 80063f0:	2000      	movs	r0, #0
 80063f2:	e7f7      	b.n	80063e4 <__swsetup_r+0x98>
 80063f4:	200000b4 	.word	0x200000b4

080063f8 <memset>:
 80063f8:	4402      	add	r2, r0
 80063fa:	4603      	mov	r3, r0
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d100      	bne.n	8006402 <memset+0xa>
 8006400:	4770      	bx	lr
 8006402:	f803 1b01 	strb.w	r1, [r3], #1
 8006406:	e7f9      	b.n	80063fc <memset+0x4>

08006408 <_close_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d06      	ldr	r5, [pc, #24]	@ (8006424 <_close_r+0x1c>)
 800640c:	2300      	movs	r3, #0
 800640e:	4604      	mov	r4, r0
 8006410:	4608      	mov	r0, r1
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	f7fb fb41 	bl	8001a9a <_close>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_close_r+0x1a>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_close_r+0x1a>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	20000418 	.word	0x20000418

08006428 <_lseek_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d07      	ldr	r5, [pc, #28]	@ (8006448 <_lseek_r+0x20>)
 800642c:	4604      	mov	r4, r0
 800642e:	4608      	mov	r0, r1
 8006430:	4611      	mov	r1, r2
 8006432:	2200      	movs	r2, #0
 8006434:	602a      	str	r2, [r5, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f7fb fb56 	bl	8001ae8 <_lseek>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_lseek_r+0x1e>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_lseek_r+0x1e>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	20000418 	.word	0x20000418

0800644c <_read_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d07      	ldr	r5, [pc, #28]	@ (800646c <_read_r+0x20>)
 8006450:	4604      	mov	r4, r0
 8006452:	4608      	mov	r0, r1
 8006454:	4611      	mov	r1, r2
 8006456:	2200      	movs	r2, #0
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	f7fb fb00 	bl	8001a60 <_read>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_read_r+0x1e>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_read_r+0x1e>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000418 	.word	0x20000418

08006470 <_write_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	@ (8006490 <_write_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fa ffb4 	bl	80013ec <_write>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_write_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_write_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	20000418 	.word	0x20000418

08006494 <__errno>:
 8006494:	4b01      	ldr	r3, [pc, #4]	@ (800649c <__errno+0x8>)
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200000b4 	.word	0x200000b4

080064a0 <__libc_init_array>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4d0d      	ldr	r5, [pc, #52]	@ (80064d8 <__libc_init_array+0x38>)
 80064a4:	4c0d      	ldr	r4, [pc, #52]	@ (80064dc <__libc_init_array+0x3c>)
 80064a6:	1b64      	subs	r4, r4, r5
 80064a8:	10a4      	asrs	r4, r4, #2
 80064aa:	2600      	movs	r6, #0
 80064ac:	42a6      	cmp	r6, r4
 80064ae:	d109      	bne.n	80064c4 <__libc_init_array+0x24>
 80064b0:	4d0b      	ldr	r5, [pc, #44]	@ (80064e0 <__libc_init_array+0x40>)
 80064b2:	4c0c      	ldr	r4, [pc, #48]	@ (80064e4 <__libc_init_array+0x44>)
 80064b4:	f000 fd2c 	bl	8006f10 <_init>
 80064b8:	1b64      	subs	r4, r4, r5
 80064ba:	10a4      	asrs	r4, r4, #2
 80064bc:	2600      	movs	r6, #0
 80064be:	42a6      	cmp	r6, r4
 80064c0:	d105      	bne.n	80064ce <__libc_init_array+0x2e>
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c8:	4798      	blx	r3
 80064ca:	3601      	adds	r6, #1
 80064cc:	e7ee      	b.n	80064ac <__libc_init_array+0xc>
 80064ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d2:	4798      	blx	r3
 80064d4:	3601      	adds	r6, #1
 80064d6:	e7f2      	b.n	80064be <__libc_init_array+0x1e>
 80064d8:	080070b0 	.word	0x080070b0
 80064dc:	080070b0 	.word	0x080070b0
 80064e0:	080070b0 	.word	0x080070b0
 80064e4:	080070b4 	.word	0x080070b4

080064e8 <__retarget_lock_init_recursive>:
 80064e8:	4770      	bx	lr

080064ea <__retarget_lock_acquire_recursive>:
 80064ea:	4770      	bx	lr

080064ec <__retarget_lock_release_recursive>:
 80064ec:	4770      	bx	lr
	...

080064f0 <_free_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4605      	mov	r5, r0
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d041      	beq.n	800657c <_free_r+0x8c>
 80064f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064fc:	1f0c      	subs	r4, r1, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bfb8      	it	lt
 8006502:	18e4      	addlt	r4, r4, r3
 8006504:	f000 f8e8 	bl	80066d8 <__malloc_lock>
 8006508:	4a1d      	ldr	r2, [pc, #116]	@ (8006580 <_free_r+0x90>)
 800650a:	6813      	ldr	r3, [r2, #0]
 800650c:	b933      	cbnz	r3, 800651c <_free_r+0x2c>
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	6014      	str	r4, [r2, #0]
 8006512:	4628      	mov	r0, r5
 8006514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006518:	f000 b8e4 	b.w	80066e4 <__malloc_unlock>
 800651c:	42a3      	cmp	r3, r4
 800651e:	d908      	bls.n	8006532 <_free_r+0x42>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	1821      	adds	r1, r4, r0
 8006524:	428b      	cmp	r3, r1
 8006526:	bf01      	itttt	eq
 8006528:	6819      	ldreq	r1, [r3, #0]
 800652a:	685b      	ldreq	r3, [r3, #4]
 800652c:	1809      	addeq	r1, r1, r0
 800652e:	6021      	streq	r1, [r4, #0]
 8006530:	e7ed      	b.n	800650e <_free_r+0x1e>
 8006532:	461a      	mov	r2, r3
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	b10b      	cbz	r3, 800653c <_free_r+0x4c>
 8006538:	42a3      	cmp	r3, r4
 800653a:	d9fa      	bls.n	8006532 <_free_r+0x42>
 800653c:	6811      	ldr	r1, [r2, #0]
 800653e:	1850      	adds	r0, r2, r1
 8006540:	42a0      	cmp	r0, r4
 8006542:	d10b      	bne.n	800655c <_free_r+0x6c>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	4401      	add	r1, r0
 8006548:	1850      	adds	r0, r2, r1
 800654a:	4283      	cmp	r3, r0
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	d1e0      	bne.n	8006512 <_free_r+0x22>
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	6053      	str	r3, [r2, #4]
 8006556:	4408      	add	r0, r1
 8006558:	6010      	str	r0, [r2, #0]
 800655a:	e7da      	b.n	8006512 <_free_r+0x22>
 800655c:	d902      	bls.n	8006564 <_free_r+0x74>
 800655e:	230c      	movs	r3, #12
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	e7d6      	b.n	8006512 <_free_r+0x22>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	1821      	adds	r1, r4, r0
 8006568:	428b      	cmp	r3, r1
 800656a:	bf04      	itt	eq
 800656c:	6819      	ldreq	r1, [r3, #0]
 800656e:	685b      	ldreq	r3, [r3, #4]
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	bf04      	itt	eq
 8006574:	1809      	addeq	r1, r1, r0
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	6054      	str	r4, [r2, #4]
 800657a:	e7ca      	b.n	8006512 <_free_r+0x22>
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	bf00      	nop
 8006580:	20000424 	.word	0x20000424

08006584 <malloc>:
 8006584:	4b02      	ldr	r3, [pc, #8]	@ (8006590 <malloc+0xc>)
 8006586:	4601      	mov	r1, r0
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	f000 b825 	b.w	80065d8 <_malloc_r>
 800658e:	bf00      	nop
 8006590:	200000b4 	.word	0x200000b4

08006594 <sbrk_aligned>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	4e0f      	ldr	r6, [pc, #60]	@ (80065d4 <sbrk_aligned+0x40>)
 8006598:	460c      	mov	r4, r1
 800659a:	6831      	ldr	r1, [r6, #0]
 800659c:	4605      	mov	r5, r0
 800659e:	b911      	cbnz	r1, 80065a6 <sbrk_aligned+0x12>
 80065a0:	f000 fca6 	bl	8006ef0 <_sbrk_r>
 80065a4:	6030      	str	r0, [r6, #0]
 80065a6:	4621      	mov	r1, r4
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 fca1 	bl	8006ef0 <_sbrk_r>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	d103      	bne.n	80065ba <sbrk_aligned+0x26>
 80065b2:	f04f 34ff 	mov.w	r4, #4294967295
 80065b6:	4620      	mov	r0, r4
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	1cc4      	adds	r4, r0, #3
 80065bc:	f024 0403 	bic.w	r4, r4, #3
 80065c0:	42a0      	cmp	r0, r4
 80065c2:	d0f8      	beq.n	80065b6 <sbrk_aligned+0x22>
 80065c4:	1a21      	subs	r1, r4, r0
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 fc92 	bl	8006ef0 <_sbrk_r>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d1f2      	bne.n	80065b6 <sbrk_aligned+0x22>
 80065d0:	e7ef      	b.n	80065b2 <sbrk_aligned+0x1e>
 80065d2:	bf00      	nop
 80065d4:	20000420 	.word	0x20000420

080065d8 <_malloc_r>:
 80065d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065dc:	1ccd      	adds	r5, r1, #3
 80065de:	f025 0503 	bic.w	r5, r5, #3
 80065e2:	3508      	adds	r5, #8
 80065e4:	2d0c      	cmp	r5, #12
 80065e6:	bf38      	it	cc
 80065e8:	250c      	movcc	r5, #12
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	4606      	mov	r6, r0
 80065ee:	db01      	blt.n	80065f4 <_malloc_r+0x1c>
 80065f0:	42a9      	cmp	r1, r5
 80065f2:	d904      	bls.n	80065fe <_malloc_r+0x26>
 80065f4:	230c      	movs	r3, #12
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	2000      	movs	r0, #0
 80065fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066d4 <_malloc_r+0xfc>
 8006602:	f000 f869 	bl	80066d8 <__malloc_lock>
 8006606:	f8d8 3000 	ldr.w	r3, [r8]
 800660a:	461c      	mov	r4, r3
 800660c:	bb44      	cbnz	r4, 8006660 <_malloc_r+0x88>
 800660e:	4629      	mov	r1, r5
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff ffbf 	bl	8006594 <sbrk_aligned>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	4604      	mov	r4, r0
 800661a:	d158      	bne.n	80066ce <_malloc_r+0xf6>
 800661c:	f8d8 4000 	ldr.w	r4, [r8]
 8006620:	4627      	mov	r7, r4
 8006622:	2f00      	cmp	r7, #0
 8006624:	d143      	bne.n	80066ae <_malloc_r+0xd6>
 8006626:	2c00      	cmp	r4, #0
 8006628:	d04b      	beq.n	80066c2 <_malloc_r+0xea>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	4639      	mov	r1, r7
 800662e:	4630      	mov	r0, r6
 8006630:	eb04 0903 	add.w	r9, r4, r3
 8006634:	f000 fc5c 	bl	8006ef0 <_sbrk_r>
 8006638:	4581      	cmp	r9, r0
 800663a:	d142      	bne.n	80066c2 <_malloc_r+0xea>
 800663c:	6821      	ldr	r1, [r4, #0]
 800663e:	1a6d      	subs	r5, r5, r1
 8006640:	4629      	mov	r1, r5
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ffa6 	bl	8006594 <sbrk_aligned>
 8006648:	3001      	adds	r0, #1
 800664a:	d03a      	beq.n	80066c2 <_malloc_r+0xea>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	442b      	add	r3, r5
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	f8d8 3000 	ldr.w	r3, [r8]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	bb62      	cbnz	r2, 80066b4 <_malloc_r+0xdc>
 800665a:	f8c8 7000 	str.w	r7, [r8]
 800665e:	e00f      	b.n	8006680 <_malloc_r+0xa8>
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	1b52      	subs	r2, r2, r5
 8006664:	d420      	bmi.n	80066a8 <_malloc_r+0xd0>
 8006666:	2a0b      	cmp	r2, #11
 8006668:	d917      	bls.n	800669a <_malloc_r+0xc2>
 800666a:	1961      	adds	r1, r4, r5
 800666c:	42a3      	cmp	r3, r4
 800666e:	6025      	str	r5, [r4, #0]
 8006670:	bf18      	it	ne
 8006672:	6059      	strne	r1, [r3, #4]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	bf08      	it	eq
 8006678:	f8c8 1000 	streq.w	r1, [r8]
 800667c:	5162      	str	r2, [r4, r5]
 800667e:	604b      	str	r3, [r1, #4]
 8006680:	4630      	mov	r0, r6
 8006682:	f000 f82f 	bl	80066e4 <__malloc_unlock>
 8006686:	f104 000b 	add.w	r0, r4, #11
 800668a:	1d23      	adds	r3, r4, #4
 800668c:	f020 0007 	bic.w	r0, r0, #7
 8006690:	1ac2      	subs	r2, r0, r3
 8006692:	bf1c      	itt	ne
 8006694:	1a1b      	subne	r3, r3, r0
 8006696:	50a3      	strne	r3, [r4, r2]
 8006698:	e7af      	b.n	80065fa <_malloc_r+0x22>
 800669a:	6862      	ldr	r2, [r4, #4]
 800669c:	42a3      	cmp	r3, r4
 800669e:	bf0c      	ite	eq
 80066a0:	f8c8 2000 	streq.w	r2, [r8]
 80066a4:	605a      	strne	r2, [r3, #4]
 80066a6:	e7eb      	b.n	8006680 <_malloc_r+0xa8>
 80066a8:	4623      	mov	r3, r4
 80066aa:	6864      	ldr	r4, [r4, #4]
 80066ac:	e7ae      	b.n	800660c <_malloc_r+0x34>
 80066ae:	463c      	mov	r4, r7
 80066b0:	687f      	ldr	r7, [r7, #4]
 80066b2:	e7b6      	b.n	8006622 <_malloc_r+0x4a>
 80066b4:	461a      	mov	r2, r3
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d1fb      	bne.n	80066b4 <_malloc_r+0xdc>
 80066bc:	2300      	movs	r3, #0
 80066be:	6053      	str	r3, [r2, #4]
 80066c0:	e7de      	b.n	8006680 <_malloc_r+0xa8>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	4630      	mov	r0, r6
 80066c8:	f000 f80c 	bl	80066e4 <__malloc_unlock>
 80066cc:	e794      	b.n	80065f8 <_malloc_r+0x20>
 80066ce:	6005      	str	r5, [r0, #0]
 80066d0:	e7d6      	b.n	8006680 <_malloc_r+0xa8>
 80066d2:	bf00      	nop
 80066d4:	20000424 	.word	0x20000424

080066d8 <__malloc_lock>:
 80066d8:	4801      	ldr	r0, [pc, #4]	@ (80066e0 <__malloc_lock+0x8>)
 80066da:	f7ff bf06 	b.w	80064ea <__retarget_lock_acquire_recursive>
 80066de:	bf00      	nop
 80066e0:	2000041c 	.word	0x2000041c

080066e4 <__malloc_unlock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	@ (80066ec <__malloc_unlock+0x8>)
 80066e6:	f7ff bf01 	b.w	80064ec <__retarget_lock_release_recursive>
 80066ea:	bf00      	nop
 80066ec:	2000041c 	.word	0x2000041c

080066f0 <__sfputc_r>:
 80066f0:	6893      	ldr	r3, [r2, #8]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	b410      	push	{r4}
 80066f8:	6093      	str	r3, [r2, #8]
 80066fa:	da08      	bge.n	800670e <__sfputc_r+0x1e>
 80066fc:	6994      	ldr	r4, [r2, #24]
 80066fe:	42a3      	cmp	r3, r4
 8006700:	db01      	blt.n	8006706 <__sfputc_r+0x16>
 8006702:	290a      	cmp	r1, #10
 8006704:	d103      	bne.n	800670e <__sfputc_r+0x1e>
 8006706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670a:	f7ff bde0 	b.w	80062ce <__swbuf_r>
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	1c58      	adds	r0, r3, #1
 8006712:	6010      	str	r0, [r2, #0]
 8006714:	7019      	strb	r1, [r3, #0]
 8006716:	4608      	mov	r0, r1
 8006718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800671c:	4770      	bx	lr

0800671e <__sfputs_r>:
 800671e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006720:	4606      	mov	r6, r0
 8006722:	460f      	mov	r7, r1
 8006724:	4614      	mov	r4, r2
 8006726:	18d5      	adds	r5, r2, r3
 8006728:	42ac      	cmp	r4, r5
 800672a:	d101      	bne.n	8006730 <__sfputs_r+0x12>
 800672c:	2000      	movs	r0, #0
 800672e:	e007      	b.n	8006740 <__sfputs_r+0x22>
 8006730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006734:	463a      	mov	r2, r7
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff ffda 	bl	80066f0 <__sfputc_r>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d1f3      	bne.n	8006728 <__sfputs_r+0xa>
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006744 <_vfiprintf_r>:
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	460d      	mov	r5, r1
 800674a:	b09d      	sub	sp, #116	@ 0x74
 800674c:	4614      	mov	r4, r2
 800674e:	4698      	mov	r8, r3
 8006750:	4606      	mov	r6, r0
 8006752:	b118      	cbz	r0, 800675c <_vfiprintf_r+0x18>
 8006754:	6a03      	ldr	r3, [r0, #32]
 8006756:	b90b      	cbnz	r3, 800675c <_vfiprintf_r+0x18>
 8006758:	f7ff fc14 	bl	8005f84 <__sinit>
 800675c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800675e:	07d9      	lsls	r1, r3, #31
 8006760:	d405      	bmi.n	800676e <_vfiprintf_r+0x2a>
 8006762:	89ab      	ldrh	r3, [r5, #12]
 8006764:	059a      	lsls	r2, r3, #22
 8006766:	d402      	bmi.n	800676e <_vfiprintf_r+0x2a>
 8006768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800676a:	f7ff febe 	bl	80064ea <__retarget_lock_acquire_recursive>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	071b      	lsls	r3, r3, #28
 8006772:	d501      	bpl.n	8006778 <_vfiprintf_r+0x34>
 8006774:	692b      	ldr	r3, [r5, #16]
 8006776:	b99b      	cbnz	r3, 80067a0 <_vfiprintf_r+0x5c>
 8006778:	4629      	mov	r1, r5
 800677a:	4630      	mov	r0, r6
 800677c:	f7ff fde6 	bl	800634c <__swsetup_r>
 8006780:	b170      	cbz	r0, 80067a0 <_vfiprintf_r+0x5c>
 8006782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006784:	07dc      	lsls	r4, r3, #31
 8006786:	d504      	bpl.n	8006792 <_vfiprintf_r+0x4e>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	b01d      	add	sp, #116	@ 0x74
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	89ab      	ldrh	r3, [r5, #12]
 8006794:	0598      	lsls	r0, r3, #22
 8006796:	d4f7      	bmi.n	8006788 <_vfiprintf_r+0x44>
 8006798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800679a:	f7ff fea7 	bl	80064ec <__retarget_lock_release_recursive>
 800679e:	e7f3      	b.n	8006788 <_vfiprintf_r+0x44>
 80067a0:	2300      	movs	r3, #0
 80067a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a4:	2320      	movs	r3, #32
 80067a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ae:	2330      	movs	r3, #48	@ 0x30
 80067b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006960 <_vfiprintf_r+0x21c>
 80067b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067b8:	f04f 0901 	mov.w	r9, #1
 80067bc:	4623      	mov	r3, r4
 80067be:	469a      	mov	sl, r3
 80067c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c4:	b10a      	cbz	r2, 80067ca <_vfiprintf_r+0x86>
 80067c6:	2a25      	cmp	r2, #37	@ 0x25
 80067c8:	d1f9      	bne.n	80067be <_vfiprintf_r+0x7a>
 80067ca:	ebba 0b04 	subs.w	fp, sl, r4
 80067ce:	d00b      	beq.n	80067e8 <_vfiprintf_r+0xa4>
 80067d0:	465b      	mov	r3, fp
 80067d2:	4622      	mov	r2, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ffa1 	bl	800671e <__sfputs_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	f000 80a7 	beq.w	8006930 <_vfiprintf_r+0x1ec>
 80067e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067e4:	445a      	add	r2, fp
 80067e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80067e8:	f89a 3000 	ldrb.w	r3, [sl]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 809f 	beq.w	8006930 <_vfiprintf_r+0x1ec>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295
 80067f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067fc:	f10a 0a01 	add.w	sl, sl, #1
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	9307      	str	r3, [sp, #28]
 8006804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006808:	931a      	str	r3, [sp, #104]	@ 0x68
 800680a:	4654      	mov	r4, sl
 800680c:	2205      	movs	r2, #5
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	4853      	ldr	r0, [pc, #332]	@ (8006960 <_vfiprintf_r+0x21c>)
 8006814:	f7f9 fd04 	bl	8000220 <memchr>
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	b9d8      	cbnz	r0, 8006854 <_vfiprintf_r+0x110>
 800681c:	06d1      	lsls	r1, r2, #27
 800681e:	bf44      	itt	mi
 8006820:	2320      	movmi	r3, #32
 8006822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006826:	0713      	lsls	r3, r2, #28
 8006828:	bf44      	itt	mi
 800682a:	232b      	movmi	r3, #43	@ 0x2b
 800682c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006830:	f89a 3000 	ldrb.w	r3, [sl]
 8006834:	2b2a      	cmp	r3, #42	@ 0x2a
 8006836:	d015      	beq.n	8006864 <_vfiprintf_r+0x120>
 8006838:	9a07      	ldr	r2, [sp, #28]
 800683a:	4654      	mov	r4, sl
 800683c:	2000      	movs	r0, #0
 800683e:	f04f 0c0a 	mov.w	ip, #10
 8006842:	4621      	mov	r1, r4
 8006844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006848:	3b30      	subs	r3, #48	@ 0x30
 800684a:	2b09      	cmp	r3, #9
 800684c:	d94b      	bls.n	80068e6 <_vfiprintf_r+0x1a2>
 800684e:	b1b0      	cbz	r0, 800687e <_vfiprintf_r+0x13a>
 8006850:	9207      	str	r2, [sp, #28]
 8006852:	e014      	b.n	800687e <_vfiprintf_r+0x13a>
 8006854:	eba0 0308 	sub.w	r3, r0, r8
 8006858:	fa09 f303 	lsl.w	r3, r9, r3
 800685c:	4313      	orrs	r3, r2
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	46a2      	mov	sl, r4
 8006862:	e7d2      	b.n	800680a <_vfiprintf_r+0xc6>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	1d19      	adds	r1, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	9103      	str	r1, [sp, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfbb      	ittet	lt
 8006870:	425b      	neglt	r3, r3
 8006872:	f042 0202 	orrlt.w	r2, r2, #2
 8006876:	9307      	strge	r3, [sp, #28]
 8006878:	9307      	strlt	r3, [sp, #28]
 800687a:	bfb8      	it	lt
 800687c:	9204      	strlt	r2, [sp, #16]
 800687e:	7823      	ldrb	r3, [r4, #0]
 8006880:	2b2e      	cmp	r3, #46	@ 0x2e
 8006882:	d10a      	bne.n	800689a <_vfiprintf_r+0x156>
 8006884:	7863      	ldrb	r3, [r4, #1]
 8006886:	2b2a      	cmp	r3, #42	@ 0x2a
 8006888:	d132      	bne.n	80068f0 <_vfiprintf_r+0x1ac>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	1d1a      	adds	r2, r3, #4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	9203      	str	r2, [sp, #12]
 8006892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006896:	3402      	adds	r4, #2
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006970 <_vfiprintf_r+0x22c>
 800689e:	7821      	ldrb	r1, [r4, #0]
 80068a0:	2203      	movs	r2, #3
 80068a2:	4650      	mov	r0, sl
 80068a4:	f7f9 fcbc 	bl	8000220 <memchr>
 80068a8:	b138      	cbz	r0, 80068ba <_vfiprintf_r+0x176>
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	eba0 000a 	sub.w	r0, r0, sl
 80068b0:	2240      	movs	r2, #64	@ 0x40
 80068b2:	4082      	lsls	r2, r0
 80068b4:	4313      	orrs	r3, r2
 80068b6:	3401      	adds	r4, #1
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068be:	4829      	ldr	r0, [pc, #164]	@ (8006964 <_vfiprintf_r+0x220>)
 80068c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068c4:	2206      	movs	r2, #6
 80068c6:	f7f9 fcab 	bl	8000220 <memchr>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d03f      	beq.n	800694e <_vfiprintf_r+0x20a>
 80068ce:	4b26      	ldr	r3, [pc, #152]	@ (8006968 <_vfiprintf_r+0x224>)
 80068d0:	bb1b      	cbnz	r3, 800691a <_vfiprintf_r+0x1d6>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	3307      	adds	r3, #7
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	3308      	adds	r3, #8
 80068dc:	9303      	str	r3, [sp, #12]
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	443b      	add	r3, r7
 80068e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e4:	e76a      	b.n	80067bc <_vfiprintf_r+0x78>
 80068e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ea:	460c      	mov	r4, r1
 80068ec:	2001      	movs	r0, #1
 80068ee:	e7a8      	b.n	8006842 <_vfiprintf_r+0xfe>
 80068f0:	2300      	movs	r3, #0
 80068f2:	3401      	adds	r4, #1
 80068f4:	9305      	str	r3, [sp, #20]
 80068f6:	4619      	mov	r1, r3
 80068f8:	f04f 0c0a 	mov.w	ip, #10
 80068fc:	4620      	mov	r0, r4
 80068fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006902:	3a30      	subs	r2, #48	@ 0x30
 8006904:	2a09      	cmp	r2, #9
 8006906:	d903      	bls.n	8006910 <_vfiprintf_r+0x1cc>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0c6      	beq.n	800689a <_vfiprintf_r+0x156>
 800690c:	9105      	str	r1, [sp, #20]
 800690e:	e7c4      	b.n	800689a <_vfiprintf_r+0x156>
 8006910:	fb0c 2101 	mla	r1, ip, r1, r2
 8006914:	4604      	mov	r4, r0
 8006916:	2301      	movs	r3, #1
 8006918:	e7f0      	b.n	80068fc <_vfiprintf_r+0x1b8>
 800691a:	ab03      	add	r3, sp, #12
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	462a      	mov	r2, r5
 8006920:	4b12      	ldr	r3, [pc, #72]	@ (800696c <_vfiprintf_r+0x228>)
 8006922:	a904      	add	r1, sp, #16
 8006924:	4630      	mov	r0, r6
 8006926:	f3af 8000 	nop.w
 800692a:	4607      	mov	r7, r0
 800692c:	1c78      	adds	r0, r7, #1
 800692e:	d1d6      	bne.n	80068de <_vfiprintf_r+0x19a>
 8006930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006932:	07d9      	lsls	r1, r3, #31
 8006934:	d405      	bmi.n	8006942 <_vfiprintf_r+0x1fe>
 8006936:	89ab      	ldrh	r3, [r5, #12]
 8006938:	059a      	lsls	r2, r3, #22
 800693a:	d402      	bmi.n	8006942 <_vfiprintf_r+0x1fe>
 800693c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800693e:	f7ff fdd5 	bl	80064ec <__retarget_lock_release_recursive>
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	065b      	lsls	r3, r3, #25
 8006946:	f53f af1f 	bmi.w	8006788 <_vfiprintf_r+0x44>
 800694a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800694c:	e71e      	b.n	800678c <_vfiprintf_r+0x48>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4b05      	ldr	r3, [pc, #20]	@ (800696c <_vfiprintf_r+0x228>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	4630      	mov	r0, r6
 800695a:	f000 f879 	bl	8006a50 <_printf_i>
 800695e:	e7e4      	b.n	800692a <_vfiprintf_r+0x1e6>
 8006960:	08007074 	.word	0x08007074
 8006964:	0800707e 	.word	0x0800707e
 8006968:	00000000 	.word	0x00000000
 800696c:	0800671f 	.word	0x0800671f
 8006970:	0800707a 	.word	0x0800707a

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4698      	mov	r8, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006990:	4607      	mov	r7, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc26      	bgt.n	8006a0a <_printf_common+0x96>
 80069bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	3b00      	subs	r3, #0
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d42b      	bmi.n	8006a24 <_printf_common+0xb0>
 80069cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069d0:	4641      	mov	r1, r8
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d01e      	beq.n	8006a18 <_printf_common+0xa4>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	bf02      	ittt	eq
 80069e6:	68e5      	ldreq	r5, [r4, #12]
 80069e8:	6833      	ldreq	r3, [r6, #0]
 80069ea:	1aed      	subeq	r5, r5, r3
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	2600      	movs	r6, #0
 8006a00:	341a      	adds	r4, #26
 8006a02:	42b5      	cmp	r5, r6
 8006a04:	d11a      	bne.n	8006a3c <_printf_common+0xc8>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e008      	b.n	8006a1c <_printf_common+0xa8>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4638      	mov	r0, r7
 8006a12:	47c8      	blx	r9
 8006a14:	3001      	adds	r0, #1
 8006a16:	d103      	bne.n	8006a20 <_printf_common+0xac>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	3501      	adds	r5, #1
 8006a22:	e7c6      	b.n	80069b2 <_printf_common+0x3e>
 8006a24:	18e1      	adds	r1, r4, r3
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	2030      	movs	r0, #48	@ 0x30
 8006a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a2e:	4422      	add	r2, r4
 8006a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a38:	3302      	adds	r3, #2
 8006a3a:	e7c7      	b.n	80069cc <_printf_common+0x58>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4641      	mov	r1, r8
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c8      	blx	r9
 8006a46:	3001      	adds	r0, #1
 8006a48:	d0e6      	beq.n	8006a18 <_printf_common+0xa4>
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7d9      	b.n	8006a02 <_printf_common+0x8e>
	...

08006a50 <_printf_i>:
 8006a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	7e0f      	ldrb	r7, [r1, #24]
 8006a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a58:	2f78      	cmp	r7, #120	@ 0x78
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	469a      	mov	sl, r3
 8006a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a66:	d807      	bhi.n	8006a78 <_printf_i+0x28>
 8006a68:	2f62      	cmp	r7, #98	@ 0x62
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x32>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f000 80d2 	beq.w	8006c16 <_printf_i+0x1c6>
 8006a72:	2f58      	cmp	r7, #88	@ 0x58
 8006a74:	f000 80b9 	beq.w	8006bea <_printf_i+0x19a>
 8006a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a80:	e03a      	b.n	8006af8 <_printf_i+0xa8>
 8006a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a86:	2b15      	cmp	r3, #21
 8006a88:	d8f6      	bhi.n	8006a78 <_printf_i+0x28>
 8006a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a90 <_printf_i+0x40>)
 8006a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006a79 	.word	0x08006a79
 8006a9c:	08006a79 	.word	0x08006a79
 8006aa0:	08006a79 	.word	0x08006a79
 8006aa4:	08006a79 	.word	0x08006a79
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a79 	.word	0x08006a79
 8006ab0:	08006a79 	.word	0x08006a79
 8006ab4:	08006a79 	.word	0x08006a79
 8006ab8:	08006a79 	.word	0x08006a79
 8006abc:	08006bfd 	.word	0x08006bfd
 8006ac0:	08006b27 	.word	0x08006b27
 8006ac4:	08006bb7 	.word	0x08006bb7
 8006ac8:	08006a79 	.word	0x08006a79
 8006acc:	08006a79 	.word	0x08006a79
 8006ad0:	08006c1f 	.word	0x08006c1f
 8006ad4:	08006a79 	.word	0x08006a79
 8006ad8:	08006b27 	.word	0x08006b27
 8006adc:	08006a79 	.word	0x08006a79
 8006ae0:	08006a79 	.word	0x08006a79
 8006ae4:	08006bbf 	.word	0x08006bbf
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6032      	str	r2, [r6, #0]
 8006af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006af8:	2301      	movs	r3, #1
 8006afa:	e09d      	b.n	8006c38 <_printf_i+0x1e8>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1d19      	adds	r1, r3, #4
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	0606      	lsls	r6, r0, #24
 8006b06:	d501      	bpl.n	8006b0c <_printf_i+0xbc>
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	e003      	b.n	8006b14 <_printf_i+0xc4>
 8006b0c:	0645      	lsls	r5, r0, #25
 8006b0e:	d5fb      	bpl.n	8006b08 <_printf_i+0xb8>
 8006b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	da03      	bge.n	8006b20 <_printf_i+0xd0>
 8006b18:	232d      	movs	r3, #45	@ 0x2d
 8006b1a:	426d      	negs	r5, r5
 8006b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b20:	4859      	ldr	r0, [pc, #356]	@ (8006c88 <_printf_i+0x238>)
 8006b22:	230a      	movs	r3, #10
 8006b24:	e011      	b.n	8006b4a <_printf_i+0xfa>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	0608      	lsls	r0, r1, #24
 8006b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b30:	d402      	bmi.n	8006b38 <_printf_i+0xe8>
 8006b32:	0649      	lsls	r1, r1, #25
 8006b34:	bf48      	it	mi
 8006b36:	b2ad      	uxthmi	r5, r5
 8006b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b3a:	4853      	ldr	r0, [pc, #332]	@ (8006c88 <_printf_i+0x238>)
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	bf14      	ite	ne
 8006b40:	230a      	movne	r3, #10
 8006b42:	2308      	moveq	r3, #8
 8006b44:	2100      	movs	r1, #0
 8006b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b4a:	6866      	ldr	r6, [r4, #4]
 8006b4c:	60a6      	str	r6, [r4, #8]
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	bfa2      	ittt	ge
 8006b52:	6821      	ldrge	r1, [r4, #0]
 8006b54:	f021 0104 	bicge.w	r1, r1, #4
 8006b58:	6021      	strge	r1, [r4, #0]
 8006b5a:	b90d      	cbnz	r5, 8006b60 <_printf_i+0x110>
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	d04b      	beq.n	8006bf8 <_printf_i+0x1a8>
 8006b60:	4616      	mov	r6, r2
 8006b62:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b66:	fb03 5711 	mls	r7, r3, r1, r5
 8006b6a:	5dc7      	ldrb	r7, [r0, r7]
 8006b6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b70:	462f      	mov	r7, r5
 8006b72:	42bb      	cmp	r3, r7
 8006b74:	460d      	mov	r5, r1
 8006b76:	d9f4      	bls.n	8006b62 <_printf_i+0x112>
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d10b      	bne.n	8006b94 <_printf_i+0x144>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	07df      	lsls	r7, r3, #31
 8006b80:	d508      	bpl.n	8006b94 <_printf_i+0x144>
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	6861      	ldr	r1, [r4, #4]
 8006b86:	4299      	cmp	r1, r3
 8006b88:	bfde      	ittt	le
 8006b8a:	2330      	movle	r3, #48	@ 0x30
 8006b8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b94:	1b92      	subs	r2, r2, r6
 8006b96:	6122      	str	r2, [r4, #16]
 8006b98:	f8cd a000 	str.w	sl, [sp]
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	aa03      	add	r2, sp, #12
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	f7ff fee6 	bl	8006974 <_printf_common>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d14a      	bne.n	8006c42 <_printf_i+0x1f2>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	b004      	add	sp, #16
 8006bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f043 0320 	orr.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	4833      	ldr	r0, [pc, #204]	@ (8006c8c <_printf_i+0x23c>)
 8006bc0:	2778      	movs	r7, #120	@ 0x78
 8006bc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	6831      	ldr	r1, [r6, #0]
 8006bca:	061f      	lsls	r7, r3, #24
 8006bcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bd0:	d402      	bmi.n	8006bd8 <_printf_i+0x188>
 8006bd2:	065f      	lsls	r7, r3, #25
 8006bd4:	bf48      	it	mi
 8006bd6:	b2ad      	uxthmi	r5, r5
 8006bd8:	6031      	str	r1, [r6, #0]
 8006bda:	07d9      	lsls	r1, r3, #31
 8006bdc:	bf44      	itt	mi
 8006bde:	f043 0320 	orrmi.w	r3, r3, #32
 8006be2:	6023      	strmi	r3, [r4, #0]
 8006be4:	b11d      	cbz	r5, 8006bee <_printf_i+0x19e>
 8006be6:	2310      	movs	r3, #16
 8006be8:	e7ac      	b.n	8006b44 <_printf_i+0xf4>
 8006bea:	4827      	ldr	r0, [pc, #156]	@ (8006c88 <_printf_i+0x238>)
 8006bec:	e7e9      	b.n	8006bc2 <_printf_i+0x172>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f023 0320 	bic.w	r3, r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	e7f6      	b.n	8006be6 <_printf_i+0x196>
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	e7bd      	b.n	8006b78 <_printf_i+0x128>
 8006bfc:	6833      	ldr	r3, [r6, #0]
 8006bfe:	6825      	ldr	r5, [r4, #0]
 8006c00:	6961      	ldr	r1, [r4, #20]
 8006c02:	1d18      	adds	r0, r3, #4
 8006c04:	6030      	str	r0, [r6, #0]
 8006c06:	062e      	lsls	r6, r5, #24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	d501      	bpl.n	8006c10 <_printf_i+0x1c0>
 8006c0c:	6019      	str	r1, [r3, #0]
 8006c0e:	e002      	b.n	8006c16 <_printf_i+0x1c6>
 8006c10:	0668      	lsls	r0, r5, #25
 8006c12:	d5fb      	bpl.n	8006c0c <_printf_i+0x1bc>
 8006c14:	8019      	strh	r1, [r3, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	6123      	str	r3, [r4, #16]
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	e7bc      	b.n	8006b98 <_printf_i+0x148>
 8006c1e:	6833      	ldr	r3, [r6, #0]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	6032      	str	r2, [r6, #0]
 8006c24:	681e      	ldr	r6, [r3, #0]
 8006c26:	6862      	ldr	r2, [r4, #4]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7f9 faf8 	bl	8000220 <memchr>
 8006c30:	b108      	cbz	r0, 8006c36 <_printf_i+0x1e6>
 8006c32:	1b80      	subs	r0, r0, r6
 8006c34:	6060      	str	r0, [r4, #4]
 8006c36:	6863      	ldr	r3, [r4, #4]
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c40:	e7aa      	b.n	8006b98 <_printf_i+0x148>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	4632      	mov	r2, r6
 8006c46:	4649      	mov	r1, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	47d0      	blx	sl
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d0ad      	beq.n	8006bac <_printf_i+0x15c>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	079b      	lsls	r3, r3, #30
 8006c54:	d413      	bmi.n	8006c7e <_printf_i+0x22e>
 8006c56:	68e0      	ldr	r0, [r4, #12]
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	bfb8      	it	lt
 8006c5e:	4618      	movlt	r0, r3
 8006c60:	e7a6      	b.n	8006bb0 <_printf_i+0x160>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4632      	mov	r2, r6
 8006c66:	4649      	mov	r1, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	47d0      	blx	sl
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d09d      	beq.n	8006bac <_printf_i+0x15c>
 8006c70:	3501      	adds	r5, #1
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	9903      	ldr	r1, [sp, #12]
 8006c76:	1a5b      	subs	r3, r3, r1
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dcf2      	bgt.n	8006c62 <_printf_i+0x212>
 8006c7c:	e7eb      	b.n	8006c56 <_printf_i+0x206>
 8006c7e:	2500      	movs	r5, #0
 8006c80:	f104 0619 	add.w	r6, r4, #25
 8006c84:	e7f5      	b.n	8006c72 <_printf_i+0x222>
 8006c86:	bf00      	nop
 8006c88:	08007085 	.word	0x08007085
 8006c8c:	08007096 	.word	0x08007096

08006c90 <__sflush_r>:
 8006c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c98:	0716      	lsls	r6, r2, #28
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	d454      	bmi.n	8006d4a <__sflush_r+0xba>
 8006ca0:	684b      	ldr	r3, [r1, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dc02      	bgt.n	8006cac <__sflush_r+0x1c>
 8006ca6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dd48      	ble.n	8006d3e <__sflush_r+0xae>
 8006cac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	d045      	beq.n	8006d3e <__sflush_r+0xae>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cb8:	682f      	ldr	r7, [r5, #0]
 8006cba:	6a21      	ldr	r1, [r4, #32]
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	d030      	beq.n	8006d22 <__sflush_r+0x92>
 8006cc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	0759      	lsls	r1, r3, #29
 8006cc6:	d505      	bpl.n	8006cd4 <__sflush_r+0x44>
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cce:	b10b      	cbz	r3, 8006cd4 <__sflush_r+0x44>
 8006cd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cd2:	1ad2      	subs	r2, r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cd8:	6a21      	ldr	r1, [r4, #32]
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b0      	blx	r6
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	d106      	bne.n	8006cf2 <__sflush_r+0x62>
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	291d      	cmp	r1, #29
 8006ce8:	d82b      	bhi.n	8006d42 <__sflush_r+0xb2>
 8006cea:	4a2a      	ldr	r2, [pc, #168]	@ (8006d94 <__sflush_r+0x104>)
 8006cec:	410a      	asrs	r2, r1
 8006cee:	07d6      	lsls	r6, r2, #31
 8006cf0:	d427      	bmi.n	8006d42 <__sflush_r+0xb2>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	6062      	str	r2, [r4, #4]
 8006cf6:	04d9      	lsls	r1, r3, #19
 8006cf8:	6922      	ldr	r2, [r4, #16]
 8006cfa:	6022      	str	r2, [r4, #0]
 8006cfc:	d504      	bpl.n	8006d08 <__sflush_r+0x78>
 8006cfe:	1c42      	adds	r2, r0, #1
 8006d00:	d101      	bne.n	8006d06 <__sflush_r+0x76>
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	b903      	cbnz	r3, 8006d08 <__sflush_r+0x78>
 8006d06:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d0a:	602f      	str	r7, [r5, #0]
 8006d0c:	b1b9      	cbz	r1, 8006d3e <__sflush_r+0xae>
 8006d0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d12:	4299      	cmp	r1, r3
 8006d14:	d002      	beq.n	8006d1c <__sflush_r+0x8c>
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7ff fbea 	bl	80064f0 <_free_r>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d20:	e00d      	b.n	8006d3e <__sflush_r+0xae>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b0      	blx	r6
 8006d28:	4602      	mov	r2, r0
 8006d2a:	1c50      	adds	r0, r2, #1
 8006d2c:	d1c9      	bne.n	8006cc2 <__sflush_r+0x32>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0c6      	beq.n	8006cc2 <__sflush_r+0x32>
 8006d34:	2b1d      	cmp	r3, #29
 8006d36:	d001      	beq.n	8006d3c <__sflush_r+0xac>
 8006d38:	2b16      	cmp	r3, #22
 8006d3a:	d11e      	bne.n	8006d7a <__sflush_r+0xea>
 8006d3c:	602f      	str	r7, [r5, #0]
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e022      	b.n	8006d88 <__sflush_r+0xf8>
 8006d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d46:	b21b      	sxth	r3, r3
 8006d48:	e01b      	b.n	8006d82 <__sflush_r+0xf2>
 8006d4a:	690f      	ldr	r7, [r1, #16]
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	d0f6      	beq.n	8006d3e <__sflush_r+0xae>
 8006d50:	0793      	lsls	r3, r2, #30
 8006d52:	680e      	ldr	r6, [r1, #0]
 8006d54:	bf08      	it	eq
 8006d56:	694b      	ldreq	r3, [r1, #20]
 8006d58:	600f      	str	r7, [r1, #0]
 8006d5a:	bf18      	it	ne
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	eba6 0807 	sub.w	r8, r6, r7
 8006d62:	608b      	str	r3, [r1, #8]
 8006d64:	f1b8 0f00 	cmp.w	r8, #0
 8006d68:	dde9      	ble.n	8006d3e <__sflush_r+0xae>
 8006d6a:	6a21      	ldr	r1, [r4, #32]
 8006d6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d6e:	4643      	mov	r3, r8
 8006d70:	463a      	mov	r2, r7
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b0      	blx	r6
 8006d76:	2800      	cmp	r0, #0
 8006d78:	dc08      	bgt.n	8006d8c <__sflush_r+0xfc>
 8006d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d8c:	4407      	add	r7, r0
 8006d8e:	eba8 0800 	sub.w	r8, r8, r0
 8006d92:	e7e7      	b.n	8006d64 <__sflush_r+0xd4>
 8006d94:	dfbffffe 	.word	0xdfbffffe

08006d98 <_fflush_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	690b      	ldr	r3, [r1, #16]
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	b913      	cbnz	r3, 8006da8 <_fflush_r+0x10>
 8006da2:	2500      	movs	r5, #0
 8006da4:	4628      	mov	r0, r5
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	b118      	cbz	r0, 8006db2 <_fflush_r+0x1a>
 8006daa:	6a03      	ldr	r3, [r0, #32]
 8006dac:	b90b      	cbnz	r3, 8006db2 <_fflush_r+0x1a>
 8006dae:	f7ff f8e9 	bl	8005f84 <__sinit>
 8006db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f3      	beq.n	8006da2 <_fflush_r+0xa>
 8006dba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dbc:	07d0      	lsls	r0, r2, #31
 8006dbe:	d404      	bmi.n	8006dca <_fflush_r+0x32>
 8006dc0:	0599      	lsls	r1, r3, #22
 8006dc2:	d402      	bmi.n	8006dca <_fflush_r+0x32>
 8006dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc6:	f7ff fb90 	bl	80064ea <__retarget_lock_acquire_recursive>
 8006dca:	4628      	mov	r0, r5
 8006dcc:	4621      	mov	r1, r4
 8006dce:	f7ff ff5f 	bl	8006c90 <__sflush_r>
 8006dd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dd4:	07da      	lsls	r2, r3, #31
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	d4e4      	bmi.n	8006da4 <_fflush_r+0xc>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	059b      	lsls	r3, r3, #22
 8006dde:	d4e1      	bmi.n	8006da4 <_fflush_r+0xc>
 8006de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006de2:	f7ff fb83 	bl	80064ec <__retarget_lock_release_recursive>
 8006de6:	e7dd      	b.n	8006da4 <_fflush_r+0xc>

08006de8 <__swhatbuf_r>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	460c      	mov	r4, r1
 8006dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df0:	2900      	cmp	r1, #0
 8006df2:	b096      	sub	sp, #88	@ 0x58
 8006df4:	4615      	mov	r5, r2
 8006df6:	461e      	mov	r6, r3
 8006df8:	da0d      	bge.n	8006e16 <__swhatbuf_r+0x2e>
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e00:	f04f 0100 	mov.w	r1, #0
 8006e04:	bf14      	ite	ne
 8006e06:	2340      	movne	r3, #64	@ 0x40
 8006e08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	6031      	str	r1, [r6, #0]
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	b016      	add	sp, #88	@ 0x58
 8006e14:	bd70      	pop	{r4, r5, r6, pc}
 8006e16:	466a      	mov	r2, sp
 8006e18:	f000 f848 	bl	8006eac <_fstat_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	dbec      	blt.n	8006dfa <__swhatbuf_r+0x12>
 8006e20:	9901      	ldr	r1, [sp, #4]
 8006e22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e2a:	4259      	negs	r1, r3
 8006e2c:	4159      	adcs	r1, r3
 8006e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e32:	e7eb      	b.n	8006e0c <__swhatbuf_r+0x24>

08006e34 <__smakebuf_r>:
 8006e34:	898b      	ldrh	r3, [r1, #12]
 8006e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e38:	079d      	lsls	r5, r3, #30
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	d507      	bpl.n	8006e50 <__smakebuf_r+0x1c>
 8006e40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	6163      	str	r3, [r4, #20]
 8006e4c:	b003      	add	sp, #12
 8006e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e50:	ab01      	add	r3, sp, #4
 8006e52:	466a      	mov	r2, sp
 8006e54:	f7ff ffc8 	bl	8006de8 <__swhatbuf_r>
 8006e58:	9f00      	ldr	r7, [sp, #0]
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f7ff fbba 	bl	80065d8 <_malloc_r>
 8006e64:	b948      	cbnz	r0, 8006e7a <__smakebuf_r+0x46>
 8006e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e6a:	059a      	lsls	r2, r3, #22
 8006e6c:	d4ee      	bmi.n	8006e4c <__smakebuf_r+0x18>
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	f043 0302 	orr.w	r3, r3, #2
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	e7e2      	b.n	8006e40 <__smakebuf_r+0xc>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	6020      	str	r0, [r4, #0]
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e82:	81a3      	strh	r3, [r4, #12]
 8006e84:	9b01      	ldr	r3, [sp, #4]
 8006e86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e8a:	b15b      	cbz	r3, 8006ea4 <__smakebuf_r+0x70>
 8006e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e90:	4630      	mov	r0, r6
 8006e92:	f000 f81d 	bl	8006ed0 <_isatty_r>
 8006e96:	b128      	cbz	r0, 8006ea4 <__smakebuf_r+0x70>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	f043 0301 	orr.w	r3, r3, #1
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	431d      	orrs	r5, r3
 8006ea8:	81a5      	strh	r5, [r4, #12]
 8006eaa:	e7cf      	b.n	8006e4c <__smakebuf_r+0x18>

08006eac <_fstat_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	@ (8006ecc <_fstat_r+0x20>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	f7fa fdfa 	bl	8001ab2 <_fstat>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d102      	bne.n	8006ec8 <_fstat_r+0x1c>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	b103      	cbz	r3, 8006ec8 <_fstat_r+0x1c>
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	bd38      	pop	{r3, r4, r5, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000418 	.word	0x20000418

08006ed0 <_isatty_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d06      	ldr	r5, [pc, #24]	@ (8006eec <_isatty_r+0x1c>)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	f7fa fdf9 	bl	8001ad2 <_isatty>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_isatty_r+0x1a>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_isatty_r+0x1a>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	20000418 	.word	0x20000418

08006ef0 <_sbrk_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d06      	ldr	r5, [pc, #24]	@ (8006f0c <_sbrk_r+0x1c>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f7fa fe02 	bl	8001b04 <_sbrk>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_sbrk_r+0x1a>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_sbrk_r+0x1a>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20000418 	.word	0x20000418

08006f10 <_init>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	bf00      	nop
 8006f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f16:	bc08      	pop	{r3}
 8006f18:	469e      	mov	lr, r3
 8006f1a:	4770      	bx	lr

08006f1c <_fini>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr
